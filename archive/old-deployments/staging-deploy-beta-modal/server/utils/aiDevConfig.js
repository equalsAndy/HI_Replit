export const aiDevConfig = {
    claude: {
        enabled: process.env.ENVIRONMENT === 'development' || process.env.ENVIRONMENT === 'production',
        apiKey: process.env.CLAUDE_API_KEY,
        model: 'claude-3-5-sonnet-20241022',
        maxTokens: 8000,
        temperature: 0.7,
        timeout: 30000
    },
    holisticReports: {
        enabled: false,
        mockMode: true,
        rateLimitPerUser: 3,
        cacheResults: true
    },
    aiCoaching: {
        enabled: false,
        mockMode: true,
        maxSessionLength: 10,
        rateLimitPerUser: 5
    },
    safety: {
        requireExplicitEnable: true,
        logAllRequests: true,
        validateResponses: true,
        fallbackToMock: true
    }
};
export const mockResponses = {
    holisticReport: {
        summary: "This is a mock holistic development report generated for testing purposes.",
        strengths: [
            "Strong analytical thinking",
            "Excellent communication skills",
            "Creative problem solving"
        ],
        recommendations: [
            "Focus on developing leadership skills",
            "Consider taking on more challenging projects",
            "Seek mentorship opportunities"
        ],
        developmentPlan: "Continue building on existing strengths while addressing growth areas."
    },
    coachingResponse: {
        message: "This is a mock coaching response. In development mode, this would be generated by Claude API.",
        suggestions: [
            "Try breaking down complex tasks into smaller steps",
            "Schedule regular reflection time",
            "Seek feedback from colleagues"
        ]
    }
};
export function validateAIConfiguration() {
    const errors = [];
    if (aiDevConfig.claude.enabled && !aiDevConfig.claude.apiKey) {
        errors.push('CLAUDE_API_KEY is required when AI features are enabled');
    }
    if (aiDevConfig.claude.enabled && !aiDevConfig.claude.model) {
        errors.push('Claude model must be specified');
    }
    if (aiDevConfig.holisticReports.rateLimitPerUser > 10) {
        errors.push('Holistic reports rate limit too high for development');
    }
    if (aiDevConfig.aiCoaching.rateLimitPerUser > 20) {
        errors.push('AI coaching rate limit too high for development');
    }
    return { valid: errors.length === 0, errors };
}
export function enableAIForDevelopment(feature) {
    if (process.env.ENVIRONMENT !== 'development' && process.env.ENVIRONMENT !== 'production') {
        console.warn('AI features can only be enabled in development or production environment');
        return false;
    }
    const validation = validateAIConfiguration();
    if (!validation.valid) {
        console.error('AI configuration validation failed:', validation.errors);
        return false;
    }
    switch (feature) {
        case 'holisticReports':
            aiDevConfig.holisticReports.enabled = true;
            console.log('✅ Holistic reports enabled for development');
            break;
        case 'aiCoaching':
            aiDevConfig.aiCoaching.enabled = true;
            console.log('✅ AI coaching enabled for development');
            break;
        case 'all':
            aiDevConfig.holisticReports.enabled = true;
            aiDevConfig.aiCoaching.enabled = true;
            console.log('✅ All AI features enabled for development');
            break;
    }
    return true;
}
export function isAIConfigured() {
    return aiDevConfig.claude.enabled &&
        !!aiDevConfig.claude.apiKey &&
        validateAIConfiguration().valid;
}
export function getAIConfigStatus() {
    return {
        environment: process.env.ENVIRONMENT || 'production',
        claude: {
            enabled: aiDevConfig.claude.enabled,
            hasApiKey: !!aiDevConfig.claude.apiKey,
            model: aiDevConfig.claude.model
        },
        features: {
            holisticReports: {
                enabled: aiDevConfig.holisticReports.enabled,
                mockMode: aiDevConfig.holisticReports.mockMode
            },
            aiCoaching: {
                enabled: aiDevConfig.aiCoaching.enabled,
                mockMode: aiDevConfig.aiCoaching.mockMode
            }
        },
        validation: validateAIConfiguration()
    };
}
