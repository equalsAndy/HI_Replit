// =============================================
// 1. Admin Interface Component
// =============================================

import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';

interface VideoThreshold {
  stepId: string;
  stepName: string;
  nextButtonThreshold: number; // Percentage to enable Next button
  completionThreshold: number; // Percentage to show green checkmark
  sectionId: string;
}

// Default thresholds for all video steps
const DEFAULT_VIDEO_THRESHOLDS: VideoThreshold[] = [
  { stepId: '1-1', stepName: 'Introduction', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '1' },
  { stepId: '2-1', stepName: 'Intro to Star Strengths', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '2' },
  { stepId: '2-3', stepName: 'Review Your Star Card', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '2' },
  { stepId: '3-1', stepName: 'Intro to Flow', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '3' },
  { stepId: '3-3', stepName: 'Rounding Out', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '3' },
  { stepId: '4-1', stepName: 'Ladder of Well-being', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '4' },
  { stepId: '4-4', stepName: 'Your Future Self', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '4' }
];

export function VideoThresholdManagement() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [thresholds, setThresholds] = useState<VideoThreshold[]>(DEFAULT_VIDEO_THRESHOLDS);
  const [hasChanges, setHasChanges] = useState(false);

  // Fetch current thresholds
  const { data: currentThresholds, isLoading } = useQuery({
    queryKey: ['video-thresholds'],
    queryFn: async () => {
      const response = await fetch('/api/admin/video-thresholds', {
        credentials: 'include'
      });
      if (!response.ok) throw new Error('Failed to fetch thresholds');
      const result = await response.json();
      return result.data || DEFAULT_VIDEO_THRESHOLDS;
    }
  });

  // Update thresholds mutation
  const updateThresholdsMutation = useMutation({
    mutationFn: async (newThresholds: VideoThreshold[]) => {
      const response = await fetch('/api/admin/video-thresholds', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ thresholds: newThresholds })
      });
      if (!response.ok) throw new Error('Failed to update thresholds');
      return response.json();
    },
    onSuccess: () => {
      toast({ title: 'Success', description: 'Video thresholds updated successfully' });
      setHasChanges(false);
      queryClient.invalidateQueries({ queryKey: ['video-thresholds'] });
    },
    onError: (error) => {
      toast({ title: 'Error', description: 'Failed to update video thresholds', variant: 'destructive' });
    }
  });

  // Reset to defaults mutation
  const resetToDefaultsMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/admin/video-thresholds/reset', {
        method: 'POST',
        credentials: 'include'
      });
      if (!response.ok) throw new Error('Failed to reset thresholds');
      return response.json();
    },
    onSuccess: () => {
      toast({ title: 'Success', description: 'Video thresholds reset to defaults' });
      setThresholds(DEFAULT_VIDEO_THRESHOLDS);
      setHasChanges(false);
      queryClient.invalidateQueries({ queryKey: ['video-thresholds'] });
    }
  });

  // Load current thresholds when data arrives
  useEffect(() => {
    if (currentThresholds) {
      setThresholds(currentThresholds);
    }
  }, [currentThresholds]);

  // Update threshold value
  const updateThreshold = (stepId: string, field: 'nextButtonThreshold' | 'completionThreshold', value: number) => {
    setThresholds(prev => prev.map(threshold => 
      threshold.stepId === stepId 
        ? { ...threshold, [field]: value }
        : threshold
    ));
    setHasChanges(true);
  };

  // Validate threshold value
  const validateThreshold = (value: number): boolean => {
    return value >= 0 && value <= 100;
  };

  // Save changes
  const handleSave = () => {
    // Validate all thresholds
    const isValid = thresholds.every(t => 
      validateThreshold(t.nextButtonThreshold) && 
      validateThreshold(t.completionThreshold) &&
      t.nextButtonThreshold <= t.completionThreshold // Next button threshold should be <= completion threshold
    );

    if (!isValid) {
      toast({ 
        title: 'Validation Error', 
        description: 'All thresholds must be between 0-100% and Next Button threshold must be ≤ Completion threshold',
        variant: 'destructive' 
      });
      return;
    }

    updateThresholdsMutation.mutate(thresholds);
  };

  if (isLoading) {
    return <div>Loading video thresholds...</div>;
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Video Completion Thresholds</CardTitle>
        <p className="text-sm text-muted-foreground">
          Configure when Next buttons activate and when green checkmarks appear for video steps.
        </p>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* Global Controls */}
          <div className="flex gap-4 p-4 bg-muted rounded-lg">
            <Button 
              onClick={handleSave} 
              disabled={!hasChanges || updateThresholdsMutation.isPending}
              className="bg-green-600 hover:bg-green-700"
            >
              {updateThresholdsMutation.isPending ? 'Saving...' : 'Save Changes'}
            </Button>
            <Button 
              variant="outline" 
              onClick={() => resetToDefaultsMutation.mutate()}
              disabled={resetToDefaultsMutation.isPending}
            >
              Reset to Defaults
            </Button>
            {hasChanges && (
              <span className="text-sm text-amber-600 self-center">● Unsaved changes</span>
            )}
          </div>

          {/* Threshold Configuration Table */}
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-2">Step</th>
                  <th className="text-left p-2">Section</th>
                  <th className="text-left p-2">Next Button Threshold (%)</th>
                  <th className="text-left p-2">Completion Threshold (%)</th>
                  <th className="text-left p-2">Description</th>
                </tr>
              </thead>
              <tbody>
                {thresholds.map((threshold) => (
                  <tr key={threshold.stepId} className="border-b hover:bg-muted/50">
                    <td className="p-2">
                      <div>
                        <div className="font-medium">{threshold.stepId}</div>
                        <div className="text-sm text-muted-foreground">{threshold.stepName}</div>
                      </div>
                    </td>
                    <td className="p-2">Section {threshold.sectionId}</td>
                    <td className="p-2">
                      <Input
                        type="number"
                        min="0"
                        max="100"
                        step="1"
                        value={threshold.nextButtonThreshold}
                        onChange={(e) => updateThreshold(threshold.stepId, 'nextButtonThreshold', parseInt(e.target.value) || 0)}
                        className="w-20"
                      />
                    </td>
                    <td className="p-2">
                      <Input
                        type="number"
                        min="0"
                        max="100"
                        step="1"
                        value={threshold.completionThreshold}
                        onChange={(e) => updateThreshold(threshold.stepId, 'completionThreshold', parseInt(e.target.value) || 0)}
                        className="w-20"
                      />
                    </td>
                    <td className="p-2 text-sm text-muted-foreground">
                      Next at {threshold.nextButtonThreshold}%, Complete at {threshold.completionThreshold}%
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Help Text */}
          <div className="p-4 bg-blue-50 rounded-lg text-sm">
            <h4 className="font-medium mb-2">How Video Thresholds Work:</h4>
            <ul className="space-y-1 text-muted-foreground">
              <li>• <strong>Next Button Threshold:</strong> Minimum % watched to enable the Next button</li>
              <li>• <strong>Completion Threshold:</strong> Minimum % watched to show green checkmark in menu</li>
              <li>• Thresholds are calculated as percentages (0-100%)</li>
              <li>• Next Button threshold should be ≤ Completion threshold</li>
              <li>• Default: 5% for Next button, 90% for completion</li>
            </ul>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// =============================================
// 2. API Endpoints (Server-side)
// =============================================

// File: server/routes/admin-routes.ts

import { Router } from 'express';
import { requireAuth, requireAdmin } from '../middleware/auth';
import { db } from '../lib/database';
import { adminSettings } from '../schema';
import { eq } from 'drizzle-orm';

const router = Router();

interface VideoThreshold {
  stepId: string;
  stepName: string;
  nextButtonThreshold: number;
  completionThreshold: number;
  sectionId: string;
}

const DEFAULT_VIDEO_THRESHOLDS: VideoThreshold[] = [
  { stepId: '1-1', stepName: 'Introduction', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '1' },
  { stepId: '2-1', stepName: 'Intro to Star Strengths', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '2' },
  { stepId: '2-3', stepName: 'Review Your Star Card', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '2' },
  { stepId: '3-1', stepName: 'Intro to Flow', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '3' },
  { stepId: '3-3', stepName: 'Rounding Out', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '3' },
  { stepId: '4-1', stepName: 'Ladder of Well-being', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '4' },
  { stepId: '4-4', stepName: 'Your Future Self', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '4' }
];

// Get video thresholds
router.get('/api/admin/video-thresholds', requireAuth, requireAdmin, async (req, res) => {
  try {
    const setting = await db.select()
      .from(adminSettings)
      .where(eq(adminSettings.key, 'video_thresholds'))
      .limit(1);

    if (setting.length === 0) {
      // Return defaults if no settings found
      return res.json({
        success: true,
        data: DEFAULT_VIDEO_THRESHOLDS
      });
    }

    const thresholds = JSON.parse(setting[0].value);
    res.json({
      success: true,
      data: thresholds
    });
  } catch (error) {
    console.error('Error fetching video thresholds:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch video thresholds'
    });
  }
});

// Update video thresholds
router.post('/api/admin/video-thresholds', requireAuth, requireAdmin, async (req, res) => {
  try {
    const { thresholds } = req.body;

    // Validate thresholds
    if (!Array.isArray(thresholds)) {
      return res.status(400).json({
        success: false,
        error: 'Thresholds must be an array'
      });
    }

    // Validate each threshold
    for (const threshold of thresholds) {
      if (!threshold.stepId || 
          typeof threshold.nextButtonThreshold !== 'number' ||
          typeof threshold.completionThreshold !== 'number' ||
          threshold.nextButtonThreshold < 0 || threshold.nextButtonThreshold > 100 ||
          threshold.completionThreshold < 0 || threshold.completionThreshold > 100 ||
          threshold.nextButtonThreshold > threshold.completionThreshold) {
        return res.status(400).json({
          success: false,
          error: 'Invalid threshold values'
        });
      }
    }

    // Upsert the setting
    const existingSetting = await db.select()
      .from(adminSettings)
      .where(eq(adminSettings.key, 'video_thresholds'))
      .limit(1);

    if (existingSetting.length === 0) {
      await db.insert(adminSettings).values({
        key: 'video_thresholds',
        value: JSON.stringify(thresholds),
        updatedAt: new Date()
      });
    } else {
      await db.update(adminSettings)
        .set({
          value: JSON.stringify(thresholds),
          updatedAt: new Date()
        })
        .where(eq(adminSettings.key, 'video_thresholds'));
    }

    res.json({
      success: true,
      message: 'Video thresholds updated successfully'
    });
  } catch (error) {
    console.error('Error updating video thresholds:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to update video thresholds'
    });
  }
});

// Reset video thresholds to defaults
router.post('/api/admin/video-thresholds/reset', requireAuth, requireAdmin, async (req, res) => {
  try {
    const existingSetting = await db.select()
      .from(adminSettings)
      .where(eq(adminSettings.key, 'video_thresholds'))
      .limit(1);

    if (existingSetting.length === 0) {
      await db.insert(adminSettings).values({
        key: 'video_thresholds',
        value: JSON.stringify(DEFAULT_VIDEO_THRESHOLDS),
        updatedAt: new Date()
      });
    } else {
      await db.update(adminSettings)
        .set({
          value: JSON.stringify(DEFAULT_VIDEO_THRESHOLDS),
          updatedAt: new Date()
        })
        .where(eq(adminSettings.key, 'video_thresholds'));
    }

    res.json({
      success: true,
      data: DEFAULT_VIDEO_THRESHOLDS,
      message: 'Video thresholds reset to defaults'
    });
  } catch (error) {
    console.error('Error resetting video thresholds:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to reset video thresholds'
    });
  }
});

export default router;

// =============================================
// 3. Video Thresholds Hook
// =============================================

// File: client/src/hooks/useVideoThresholds.ts

import { useQuery } from '@tanstack/react-query';

interface VideoThreshold {
  stepId: string;
  stepName: string;
  nextButtonThreshold: number;
  completionThreshold: number;
  sectionId: string;
}

const DEFAULT_THRESHOLDS: VideoThreshold[] = [
  { stepId: '1-1', stepName: 'Introduction', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '1' },
  { stepId: '2-1', stepName: 'Intro to Star Strengths', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '2' },
  { stepId: '2-3', stepName: 'Review Your Star Card', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '2' },
  { stepId: '3-1', stepName: 'Intro to Flow', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '3' },
  { stepId: '3-3', stepName: 'Rounding Out', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '3' },
  { stepId: '4-1', stepName: 'Ladder of Well-being', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '4' },
  { stepId: '4-4', stepName: 'Your Future Self', nextButtonThreshold: 5, completionThreshold: 90, sectionId: '4' }
];

export function useVideoThresholds() {
  const { data: thresholds = DEFAULT_THRESHOLDS, isLoading } = useQuery({
    queryKey: ['video-thresholds'],
    queryFn: async () => {
      const response = await fetch('/api/admin/video-thresholds', {
        credentials: 'include'
      });
      if (!response.ok) {
        console.warn('Failed to fetch video thresholds, using defaults');
        return DEFAULT_THRESHOLDS;
      }
      const result = await response.json();
      return result.data || DEFAULT_THRESHOLDS;
    },
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
    retry: 1
  });

  // Get threshold for specific step
  const getThreshold = (stepId: string): VideoThreshold => {
    const threshold = thresholds.find(t => t.stepId === stepId);
    return threshold || { 
      stepId, 
      stepName: stepId, 
      nextButtonThreshold: 5, 
      completionThreshold: 90, 
      sectionId: stepId.split('-')[0] 
    };
  };

  // Check if Next button should be enabled (unlocks next stepId)
  const canProceedToNext = (stepId: string, videoProgress: number): boolean => {
    const threshold = getThreshold(stepId);
    return videoProgress >= threshold.nextButtonThreshold;
  };

  // Check if step should show green checkmark (step completion)
  const isStepComplete = (stepId: string, videoProgress: number): boolean => {
    const threshold = getThreshold(stepId);
    return videoProgress >= threshold.completionThreshold;
  };

  // Get the next step ID that should be unlocked
  const getNextStepToUnlock = (currentStepId: string): string | null => {
    const stepOrder = ['1-1', '2-1', '2-2', '2-3', '2-4', '3-1', '3-2', '3-3', '3-4', '4-1', '4-2', '4-3', '4-4', '4-5'];
    const currentIndex = stepOrder.indexOf(currentStepId);
    return currentIndex >= 0 && currentIndex < stepOrder.length - 1 
      ? stepOrder[currentIndex + 1] 
      : null;
  };

  return {
    thresholds,
    isLoading,
    getThreshold,
    canProceedToNext,
    isStepComplete
  };
}