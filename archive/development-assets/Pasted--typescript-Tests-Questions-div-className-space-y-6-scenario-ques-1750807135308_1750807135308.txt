```typescript
      {/* Tests/Questions */}
      <div className="space-y-6">
        {scenario.questions.map((question, qIndex) => {
          const testName = scenario.metadata.tests[qIndex] || 'test';
          
          return (
            <div key={qIndex} className="bg-white p-6 rounded-lg border-l-4 border-purple-500">
              <h4 className="flex items-center gap-2 text-purple-600 font-semibold mb-3">
                {getTestIcon(testName)}
                {getTestTitle(testName)}
              </h4>
              <p className="mb-4 text-gray-700">{question.question}</p>

              {question.type === 'textarea' ? (
                <textarea
                  value={answers[qIndex] || ''}
                  onChange={(e) => handleTextareaChange(qIndex, e.target.value)}
                  placeholder={question.hint || 'Enter your analysis...'}
                  className="w-full p-3 border border-gray-300 rounded-lg resize-vertical min-h-[100px] focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
              ) : (
                <div className="space-y-2">
                  {question.options?.map((option, oIndex) => (
                    <label key={oIndex} className="flex items-center p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={(answers[qIndex] || []).includes(oIndex)}
                        onChange={(e) => handleCheckboxChange(qIndex, oIndex, e.target.checked)}
                        className="mr-3 text-purple-600 focus:ring-purple-500"
                      />
                      <span className="text-gray-700">{option}</span>
                    </label>
                  ))}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Submit Button */}
      {!showFeedback && checkCompletion() && (
        <button
          onClick={handleSubmit}
          className="w-full bg-purple-600 text-white py-3 rounded-lg hover:bg-purple-700 transition-colors"
        >
          Complete Analysis
        </button>
      )}

      {/* Feedback */}
      {showFeedback && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-6">
          <div className="flex items-center gap-2 mb-4">
            <CheckCircle className="w-6 h-6 text-green-600" />
            <h4 className="font-semibold text-green-800">Great systematic analysis!</h4>
          </div>
          <p className="text-green-700 mb-4">
            You've applied all five discernment tests. This methodical approach helps you evaluate any suspicious content objectively rather than emotionally.
          </p>
          <button
            onClick={onComplete}
            className="w-full bg-gradient-to-r from-purple-600 to-purple-800 text-white py-3 rounded-lg hover:opacity-90 transition-opacity"
          >
            Complete All Exercises
          </button>
        </div>
      )}
    </div>
  );
};

export default ToolkitPracticeExercise;
```

### **3. Update ia-7-1 Step Integration**
**Location**: Find and modify the IA content component (likely `client/src/components/imaginal-agility/ImaginalAgilityContent.tsx`)

**Add this import at the top:**
```typescript
import DiscernmentModal from './DiscernmentModal';
```

**Add state management in the component:**
```typescript
const [showDiscernmentModal, setShowDiscernmentModal] = useState(false);
```

**Find the `ia-7-1` case and modify it:**
```typescript
case 'ia-7-1':
  return (
    <div className="ia-content">
      {/* Keep existing ia-7-1 content */}
      <div className="prose prose-lg max-w-none mb-8">
        <h2>Reality Discernment</h2>
        <p>Train Your Mind to Know What's Real.</p>
        <p>In an age of AI-generated content, deepfakes, and digital manipulation, discernment is no longer optional â€” it's essential.</p>
        
        {/* Add existing ia-7-1 content here */}
        <div className="space-y-4">
          <h3>What You'll Learn:</h3>
          <ul>
            <li>Why imagination is your first line of cognitive defense</li>
            <li>How AI content bypasses our natural filters</li>
            <li>What neuroscience reveals about perception and deception</li>
            <li>How to track your own AI interaction patterns in real time</li>
          </ul>
          
          <h3>What You'll Practice:</h3>
          <ul>
            <li>The 3-Second Reality Check â€” pause before reacting to emotional content</li>
            <li>Visual detection challenge â€” spot AI-generated and manipulated images</li>
            <li>5-Test Toolkit â€” systematic framework for content evaluation</li>
          </ul>
        </div>
      </div>

      {/* Add Practice and Navigation Buttons */}
      <div className="space-y-4">
        <button
          onClick={() => setShowDiscernmentModal(true)}
          className="w-full bg-gradient-to-r from-purple-600 to-purple-800 text-white py-4 px-6 rounded-lg hover:opacity-90 transition-opacity flex items-center justify-center gap-3"
        >
          <span className="text-xl">ðŸŽ¯</span>
          <span className="font-semibold">Reality Discernment Practice</span>
        </button>
        
        <button
          onClick={() => onStepComplete('ia-8-1')}
          className="w-full bg-purple-600 text-white py-3 px-6 rounded-lg hover:bg-purple-700 transition-colors"
        >
          Next: The Neuroscience â†’
        </button>
      </div>

      {/* Add Modal */}
      <DiscernmentModal
        isOpen={showDiscernmentModal}
        onClose={() => setShowDiscernmentModal(false)}
      />
    </div>
  );
```

## âœ… **SUCCESS CRITERIA**

After implementation:
- [ ] "Reality Discernment Practice" button appears on ia-7-1 step
- [ ] Modal opens with 3 exercise progression working
- [ ] Each exercise loads scenarios from Phase 1A database
- [ ] User progress tracking works via API calls
- [ ] Modal closes properly and returns to ia-7-1
- [ ] "Next: The Neuroscience" button navigates to ia-8-1
- [ ] No interference with existing IA workshop flow

## ðŸ§ª **TESTING CHECKLIST**

### **Modal Integration:**
- [ ] Button appears on ia-7-1 step
- [ ] Modal opens without console errors
- [ ] Modal closes and returns to correct state
- [ ] Navigation to ia-8-1 works correctly

### **Exercise Functionality:**
- [ ] Reality Check exercise: timer works, questions load, answers save
- [ ] Visual Detection: images load, real/fake selection works
- [ ] Toolkit Practice: all test sections work, completion logic functions

### **API Integration:**
- [ ] Scenarios load from database correctly
- [ ] Different scenarios appear on modal reopening (user-specific randomization)
- [ ] Progress tracking API calls succeed
- [ ] Error handling works when API fails

### **No Conflicts:**
- [ ] IA workshop navigation unchanged
- [ ] Other IA steps unaffected
- [ ] AST workshop completely untouched
- [ ] No console errors or warnings

## ðŸš¨ **IMPLEMENTATION NOTES**

- **Use existing Tailwind classes** - no custom CSS files needed
- **Follow existing IA color scheme** - purple gradients and styling
- **Error boundaries** - handle API failures gracefully with retry options
- **Loading states** - show spinners while API calls are in progress
- **Mobile responsive** - ensure modal works on all screen sizes

**Ready to implement Phase 1B!**