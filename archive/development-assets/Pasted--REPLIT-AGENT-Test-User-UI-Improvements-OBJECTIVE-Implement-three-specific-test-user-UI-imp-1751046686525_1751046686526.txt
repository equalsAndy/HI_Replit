# REPLIT AGENT: Test User UI Improvements

## 🎯 OBJECTIVE
Implement three specific test user UI improvements based on user feedback and screenshots provided.

## 📋 THREE ENHANCEMENT TASKS

### **Task 1: Fix Test User Toggle Visual Bug**

**Problem**: Test user toggle in admin edit dialog doesn't move when clicked (functional but visual bug)

**Location**: Admin user management dialog - "Test User" toggle switch

**Current Behavior**: 
- Toggle changes database value ✅
- Toggle doesn't move visually ❌

**Required Fix**:
- Toggle should move to reflect current state
- Visual state should match database state
- Smooth toggle animation when clicked

**Implementation Notes**:
```typescript
// Ensure toggle component reflects actual isTestUser state
const [isTestUser, setIsTestUser] = useState(user?.isTestUser || false);

// Update visual state when database changes
useEffect(() => {
  setIsTestUser(user?.isTestUser || false);
}, [user?.isTestUser]);

// Handle toggle change
const handleToggle = async (newValue) => {
  setIsTestUser(newValue); // Immediate visual feedback
  await updateUserTestStatus(userId, newValue);
  // Refresh user data to confirm change
};
```

### **Task 2: Add Test User Indicator to Header**

**Requirement**: Show "Test User" in yellow header when logged in as test user, similar to how "Admin" appears

**Reference**: Screenshot shows "Admin" and "Admin User" in top-right of yellow header

**Implementation**:
- Add test user indicator next to user info in header
- Use same styling pattern as admin indicator
- Priority: Admin status takes precedence over test user status

**Logic**:
```typescript
// Header indicator priority
const getHeaderIndicator = (user) => {
  if (user?.role === 'admin') return 'Admin';
  if (user?.isTestUser === true) return 'Test User';
  return null; // No indicator for regular users
};
```

**Visual Design**:
```
Admin (who is also test user): [Logo] ... [Admin] [3] [Admin User]
Test User (non-admin):         [Logo] ... [Test User] [3] [Test User Name]
Regular User:                  [Logo] ... [3] [Regular User Name]
```

**Location**: Top navigation header component

**Styling**: Match existing admin indicator styling for consistency

### **Task 3: Add Data Reset for Test Users**

**Requirement**: Allow test users to delete their own data from profile dialog

**Current**: Only admins can reset test user data  
**New**: Test users can reset their own data

**Implementation Details**:

**Add to Profile Dialog**:
- "Reset My Data" button or section
- Only visible to test users (`isTestUser: true`)
- Confirmation dialog before deletion
- Clear feedback on completion

**Functionality**:
- Delete all user workshop data (assessments, progress, reflections)
- Keep user account but clear workshop progress
- Return to clean state as if new user
- Maintain test user status

**User Experience Flow**:
1. Test user clicks profile
2. Profile dialog opens
3. "Reset My Data" section visible (test users only)
4. Click "Reset My Data" 
5. Confirmation dialog: "This will delete all your workshop progress. Continue?"
6. On confirm: Delete data + show success message
7. Redirect to workshop home or appropriate starting point

## 🔧 TECHNICAL REQUIREMENTS

### **File Locations to Update**:

**Task 1 - Toggle Fix**:
- Admin user management component
- User edit dialog component
- Toggle switch component

**Task 2 - Header Indicator**:
- Main navigation/header component
- User context/auth integration
- Header styling

**Task 3 - Data Reset**:
- Profile dialog component
- Data deletion service/API
- User data management utilities

### **Security Requirements**:

**For Data Reset**:
- Verify user is resetting their own data only
- Confirm user has `isTestUser: true` status
- Protect against accidental deletion
- Log data reset actions for audit

**Implementation Pattern**:
```typescript
const handleDataReset = async () => {
  // Security checks
  if (!user?.isTestUser) {
    throw new Error('Data reset only available to test users');
  }
  
  if (user.id !== currentUserId) {
    throw new Error('Users can only reset their own data');
  }
  
  // Confirmation
  const confirmed = await showConfirmDialog(
    'Reset All Data',
    'This will delete all your workshop progress. This cannot be undone. Continue?'
  );
  
  if (!confirmed) return;
  
  // Execute reset
  await deleteUserData(user.id);
  
  // Feedback and redirect
  showSuccessMessage('Your data has been reset successfully');
  redirectToWorkshopHome();
};
```

## 🎨 UI/UX SPECIFICATIONS

### **Test User Header Indicator**:
- Use same yellow header background
- Match admin indicator styling
- Position consistently with admin layout
- Text: "Test User" or "Test Account"

### **Profile Data Reset Section**:
- Clear separation from other profile options
- Warning styling (red/orange accent)
- Descriptive text about what gets deleted
- Prominent "Reset My Data" button

### **Confirmation Dialog**:
- Clear warning about data loss
- List what will be deleted
- "Cancel" and "Reset Data" buttons
- Red/warning styling for reset action

## ✅ SUCCESS CRITERIA

### **Task 1 - Toggle Fix**:
- [ ] Toggle visually moves when clicked
- [ ] Toggle reflects actual database state
- [ ] Smooth animation on state change
- [ ] Works consistently across browsers

### **Task 2 - Header Indicator**:
- [ ] "Test User" appears in header for test users
- [ ] Not visible for regular users
- [ ] Styling matches admin indicator
- [ ] Positioned correctly in header layout

### **Task 3 - Data Reset**:
- [ ] Reset option visible only to test users
- [ ] Confirmation dialog prevents accidental deletion
- [ ] All user workshop data deleted correctly
- [ ] User account and test status preserved
- [ ] Clear success feedback provided
- [ ] Appropriate redirect after reset

### **Overall Verification**:
- [ ] All three features work independently
- [ ] No conflicts between enhancements
- [ ] Consistent UI/UX across features
- [ ] Security requirements met for each task

---

**IMPLEMENT: All three test user UI improvements with proper security, styling, and user experience patterns.**