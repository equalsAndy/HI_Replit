# Phase 1B: Auto-Save Text Inputs Implementation

## ðŸŽ¯ IMMEDIATE GOAL
Connect existing UI components to the API endpoints from Phase 1A. Users should see their text automatically save as they type and load when they return to any page.

## ðŸš¨ CRITICAL RULES
- **DO NOT CHANGE** existing UI appearance, layout, or user interactions
- **ONLY ADD** auto-save and data loading functionality behind the scenes
- **USE EXISTING** form inputs and components as-is

## Components to Enhance

Find and enhance these components in `client/src/components/content/`:

### Text-Based Reflection Components:
1. **Rounding Out Component** - Connect to `/api/workshop-data/rounding-out`
2. **Future Self Component** - Connect to `/api/workshop-data/future-self`  
3. **Final Insights Component** - Connect to `/api/workshop-data/final-insights`

*Note: Cantril Ladder has number inputs, not text - handle in Phase 1C*

## Implementation Pattern for Each Text Component

### 1. Add Data Loading (useEffect on mount)
```javascript
import { useEffect, useState } from 'react';

const [formData, setFormData] = useState({
  strengths: '',
  values: '', 
  passions: '',
  growthAreas: ''
});

// Load existing data when component mounts
useEffect(() => {
  const loadExistingData = async () => {
    try {
      const response = await fetch('/api/workshop-data/rounding-out', {
        credentials: 'include' // For auth
      });
      const result = await response.json();
      
      if (result.success && result.data) {
        setFormData(result.data);
      }
    } catch (error) {
      console.log('No existing data found'); // Silent failure OK
    }
  };
  
  loadExistingData();
}, []);
```

### 2. Add Debounced Auto-Save
```javascript
import { useCallback } from 'react';

// Debounced save function (1 second delay)
const debouncedSave = useCallback(
  debounce(async (dataToSave) => {
    try {
      const response = await fetch('/api/workshop-data/rounding-out', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(dataToSave)
      });
      
      const result = await response.json();
      if (result.success) {
        console.log('Auto-saved successfully');
        // Optional: Show subtle save indicator
      }
    } catch (error) {
      console.error('Auto-save failed:', error);
      // Phase 1D will add retry logic
    }
  }, 1000), // 1 second delay
  []
);

// Trigger save whenever form data changes
useEffect(() => {
  if (formData.strengths || formData.values || formData.passions || formData.growthAreas) {
    debouncedSave(formData);
  }
}, [formData, debouncedSave]);
```

### 3. Connect Form Inputs to State
```javascript
// Update the existing text inputs to use our state
const handleInputChange = (field, value) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));
};

// In the JSX, make sure inputs use formData values:
<textarea 
  value={formData.strengths}
  onChange={(e) => handleInputChange('strengths', e.target.value)}
  // ... keep all existing props like placeholder, className, etc.
/>
```

## Specific Component Mappings

### Rounding Out Reflection Component
- **Endpoint**: `/api/workshop-data/rounding-out`
- **Fields**: `strengths`, `values`, `passions`, `growthAreas`
- **Assessment Type**: `'roundingOutReflection'`

### Future Self Reflection Component  
- **Endpoint**: `/api/workshop-data/future-self`
- **Fields**: `futureSelfDescription`, `visualizationNotes` (optional)
- **Assessment Type**: `'futureSelfReflection'`

### Final Insights Reflection Component
- **Endpoint**: `/api/workshop-data/final-insights`
- **Fields**: `keyInsights`, `actionSteps`, `commitments`
- **Assessment Type**: `'finalReflection'`

## Utility Function for Debouncing

Create or use existing debounce utility:

```javascript
// utils/debounce.js (create if doesn't exist)
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

export { debounce };
```

## Error Handling (Simple for Phase 1B)

```javascript
const saveWithBasicRetry = async (dataToSave, endpoint) => {
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(dataToSave)
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          return result; // Success!
        }
      }
      throw new Error('Save failed');
    } catch (error) {
      if (attempt === 3) {
        console.error('Failed to save after 3 attempts:', error);
        // Phase 1D will add local storage backup
      } else {
        // Wait before retry: 1s, then 2s, then 4s
        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
      }
    }
  }
};
```

## Component Integration Checklist

For each text component, ensure:

### âœ… Data Loading:
- [ ] Component loads existing data on mount
- [ ] Form fields populate with saved values
- [ ] Handles empty/new user state gracefully

### âœ… Auto-Save:
- [ ] Text changes trigger debounced save (1 second)
- [ ] Save function uses correct endpoint
- [ ] Form state updates trigger save

### âœ… User Experience:
- [ ] No visible changes to UI appearance  
- [ ] All existing functionality preserved
- [ ] No error messages shown to user (log only)

## Testing Phase 1B

### Test Each Component:
1. **Navigate to reflection page**
2. **Type in text fields** 
3. **Wait 1+ seconds for auto-save**
4. **Navigate away from page**
5. **Return to same page**
6. **Verify text is still there** âœ…

### Test Scenarios:
- Empty form (new user)
- Partially filled form  
- Completely filled form
- Fast typing (debounce working)
- Network issues (retry working)

## Success Criteria for Phase 1B

âœ… **Rounding Out**: Type strengths/values/passions/growth areas, data persists  
âœ… **Future Self**: Type future description/notes, data persists  
âœ… **Final Insights**: Type insights/actions/commitments, data persists  
âœ… **Auto-save**: Works without user action (1 second after typing stops)  
âœ… **Data loading**: Previous answers appear when returning to pages  
âœ… **No UI changes**: Everything looks and works the same to users  

## Files to Modify

Look for these component files in `client/src/components/content/`:
- Component handling rounding out reflection
- Component handling future self reflection  
- Component handling final insights reflection

**DO NOT MODIFY:**
- Assessment components with scores/selections (Phase 1C)
- Any visual styling or layout
- Navigation or other unrelated components

## Implementation Order

1. **Start with one component** (e.g., Rounding Out) to test the pattern
2. **Verify it works completely** before moving to next component
3. **Replicate pattern** to other text-based components
4. **Test all components** before moving to Phase 1C

Claude, implement Phase 1B following this specification. Focus on getting one text component working first, then replicate to the others.

Report back when users can type in text areas and see their text persist when they navigate away and return.