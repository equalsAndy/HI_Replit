# Fix "Cannot GET /" and Port Conflicts - Permanent Solution

## üéØ PROBLEM
Getting "Cannot GET /" errors and port conflicts when restarting the app. Need a reliable solution that works every time the application restarts.

## üîç ROOT CAUSES

### 1. **Port Already in Use**
Previous Node.js process didn't terminate properly and is still holding the port.

### 2. **Missing Root Route**
Express server doesn't have a proper route handler for the root path `/`.

### 3. **Environment Port Configuration**
Port environment variables not set correctly for the deployment environment.

### 4. **Process Cleanup Issues**
Multiple instances of the app running simultaneously.

## üîß COMPREHENSIVE SOLUTION

### Fix 1: Add Robust Port Management

**File**: `server/index.ts` or main server file

```typescript
import express from 'express';
import { createServer } from 'http';

const app = express();

// ============= PORT CONFIGURATION =============
const getPort = (): number => {
  // Priority order for port selection
  const portSources = [
    process.env.PORT,           // Replit/deployment environment
    process.env.REPL_PORT,     // Replit specific
    process.env.SERVER_PORT,   // Custom env var
    '3000'                     // Fallback
  ];
  
  for (const port of portSources) {
    if (port && !isNaN(Number(port))) {
      console.log(`üîó Using port from ${port === process.env.PORT ? 'PORT' : port === process.env.REPL_PORT ? 'REPL_PORT' : 'default'}: ${port}`);
      return Number(port);
    }
  }
  
  return 3000;
};

const PORT = getPort();
console.log(`üöÄ Server will attempt to start on port: ${PORT}`);

// ============= KILL EXISTING PROCESSES =============
const killExistingProcess = async (port: number): Promise<void> => {
  try {
    console.log(`üîç Checking for existing processes on port ${port}...`);
    
    // For Unix-like systems (Replit, Linux, macOS)
    const { exec } = require('child_process');
    
    return new Promise((resolve) => {
      exec(`lsof -ti:${port}`, (error: any, stdout: string) => {
        if (stdout.trim()) {
          const pids = stdout.trim().split('\n');
          console.log(`üíÄ Found ${pids.length} existing process(es) on port ${port}: ${pids.join(', ')}`);
          
          pids.forEach(pid => {
            exec(`kill -9 ${pid}`, (killError: any) => {
              if (killError) {
                console.warn(`‚ö†Ô∏è Could not kill process ${pid}:`, killError.message);
              } else {
                console.log(`‚úÖ Killed process ${pid}`);
              }
            });
          });
          
          // Wait a moment for processes to terminate
          setTimeout(resolve, 1000);
        } else {
          console.log(`‚úÖ No existing processes found on port ${port}`);
          resolve();
        }
      });
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not check for existing processes:', error);
  }
};

// ============= ROOT ROUTE HANDLER =============
app.get('/', (req, res) => {
  console.log('üìç Root route accessed');
  
  // Determine if user is authenticated
  const isAuthenticated = req.session?.userId || req.user?.id;
  
  if (isAuthenticated) {
    // Redirect authenticated users to their dashboard/home
    res.redirect('/dashboard');
  } else {
    // Serve login page or landing page for unauthenticated users
    res.redirect('/login');
  }
});

// ============= HEALTH CHECK ROUTE =============
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    port: PORT,
    environment: process.env.NODE_ENV || 'development'
  });
});

// ============= CATCH-ALL ROUTE HANDLER =============
app.get('*', (req, res) => {
  console.log(`üìç Unhandled route accessed: ${req.path}`);
  
  // For API routes, return JSON error
  if (req.path.startsWith('/api/')) {
    res.status(404).json({ 
      success: false, 
      error: 'API endpoint not found',
      path: req.path 
    });
  } else {
    // For all other routes, redirect to frontend
    res.redirect('/dashboard');
  }
});

// ============= SERVER STARTUP WITH RETRY =============
const startServer = async (port: number, retryCount: number = 0): Promise<void> => {
  try {
    // Kill any existing processes first
    await killExistingProcess(port);
    
    const server = createServer(app);
    
    return new Promise((resolve, reject) => {
      const serverInstance = server.listen(port, '0.0.0.0', () => {
        console.log(`üöÄ Server successfully started on port ${port}`);
        console.log(`üåê Server URL: http://localhost:${port}`);
        
        if (process.env.REPL_SLUG) {
          console.log(`üåê Replit URL: https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`);
        }
        
        resolve();
      });
      
      serverInstance.on('error', (error: any) => {
        if (error.code === 'EADDRINUSE') {
          console.error(`‚ùå Port ${port} is still in use`);
          
          if (retryCount < 3) {
            console.log(`üîÑ Retrying with port ${port + 1} (attempt ${retryCount + 1}/3)...`);
            serverInstance.close();
            setTimeout(() => {
              startServer(port + 1, retryCount + 1).then(resolve).catch(reject);
            }, 2000);
          } else {
            reject(new Error(`Failed to start server after 3 attempts. Ports ${port} through ${port + 2} are all in use.`));
          }
        } else {
          reject(error);
        }
      });
      
      // Graceful shutdown handling
      process.on('SIGTERM', () => {
        console.log('üõë SIGTERM received, shutting down gracefully...');
        serverInstance.close(() => {
          console.log('‚úÖ Server shut down successfully');
          process.exit(0);
        });
      });
      
      process.on('SIGINT', () => {
        console.log('üõë SIGINT received, shutting down gracefully...');
        serverInstance.close(() => {
          console.log('‚úÖ Server shut down successfully');
          process.exit(0);
        });
      });
    });
  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    throw error;
  }
};

// ============= START THE SERVER =============
startServer(PORT).catch((error) => {
  console.error('üí• Server startup failed:', error);
  process.exit(1);
});
```

### Fix 2: Add Startup Script with Process Cleanup

**File**: `scripts/cleanup-and-start.sh`

```bash
#!/bin/bash

echo "üßπ Cleaning up existing processes..."

# Kill any existing Node.js processes
pkill -f "node.*server" || true
pkill -f "tsx.*server" || true
pkill -f "npm.*start" || true

# Kill processes on common ports
for port in 3000 3001 3002 5000 8000; do
  pid=$(lsof -ti:$port 2>/dev/null)
  if [ ! -z "$pid" ]; then
    echo "üíÄ Killing process $pid on port $port"
    kill -9 $pid || true
  fi
done

echo "‚è≥ Waiting for processes to terminate..."
sleep 2

echo "üöÄ Starting application..."
npm run dev
```

### Fix 3: Update Package.json Scripts

**File**: `package.json`

```json
{
  "scripts": {
    "dev": "tsx watch server/index.ts",
    "start": "node dist/server/index.js",
    "clean-start": "bash scripts/cleanup-and-start.sh",
    "kill-port": "lsof -ti:3000 | xargs kill -9 || true",
    "restart": "npm run kill-port && npm run dev"
  }
}
```

### Fix 4: Add Environment Variable Configuration

**File**: `.env` (create if doesn't exist)

```bash
# Server Configuration
PORT=3000
NODE_ENV=development

# Replit Configuration (auto-populated in Replit)
# REPL_PORT=3000
# REPL_SLUG=your-repl-name
# REPL_OWNER=your-username

# Database
DATABASE_URL=your_database_url

# Session Configuration
SESSION_SECRET=your_session_secret
```

### Fix 5: Add Replit-Specific Configuration

**File**: `.replit`

```ini
run = "npm run clean-start"
modules = ["nodejs-20"]

[deployment]
run = ["sh", "-c", "npm run clean-start"]

[env]
PATH = "/home/runner/$REPL_SLUG/.config/npm/node_global/bin:/home/runner/$REPL_SLUG/node_modules/.bin"
npm_config_prefix = "/home/runner/$REPL_SLUG/.config/npm/node_global"

[nix]
channel = "stable-22_11"

[gitHubImport]
requiredFiles = [".replit", "package.json"]

[languages]
[languages.typescript]
pattern = "**/{*.ts,*.js,*.tsx,*.jsx}"
[languages.typescript.languageServer]
start = "typescript-language-server --stdio"

[[ports]]
localPort = 3000
externalPort = 80
```

### Fix 6: Add Process Monitoring Utility

**File**: `utils/processMonitor.ts`

```typescript
import { exec } from 'child_process';

export class ProcessMonitor {
  static async getPortUsage(port: number): Promise<string[]> {
    return new Promise((resolve) => {
      exec(`lsof -ti:${port}`, (error, stdout) => {
        if (error || !stdout.trim()) {
          resolve([]);
        } else {
          resolve(stdout.trim().split('\n'));
        }
      });
    });
  }
  
  static async killProcessesOnPort(port: number): Promise<boolean> {
    try {
      const pids = await this.getPortUsage(port);
      
      if (pids.length === 0) {
        console.log(`‚úÖ Port ${port} is free`);
        return true;
      }
      
      console.log(`üíÄ Killing ${pids.length} process(es) on port ${port}`);
      
      for (const pid of pids) {
        await new Promise<void>((resolve) => {
          exec(`kill -9 ${pid}`, (error) => {
            if (error) {
              console.warn(`‚ö†Ô∏è Could not kill process ${pid}`);
            } else {
              console.log(`‚úÖ Killed process ${pid}`);
            }
            resolve();
          });
        });
      }
      
      // Wait for processes to terminate
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Verify port is now free
      const remainingPids = await this.getPortUsage(port);
      return remainingPids.length === 0;
    } catch (error) {
      console.error('Error killing processes:', error);
      return false;
    }
  }
  
  static async findAvailablePort(startPort: number = 3000): Promise<number> {
    for (let port = startPort; port < startPort + 10; port++) {
      const pids = await this.getPortUsage(port);
      if (pids.length === 0) {
        return port;
      }
    }
    throw new Error(`No available ports found between ${startPort} and ${startPort + 9}`);
  }
}
```

### Fix 7: Add Startup Health Check

**File**: `scripts/healthcheck.js`

```javascript
const http = require('http');

const checkHealth = (port = 3000, retries = 5) => {
  const options = {
    hostname: 'localhost',
    port: port,
    path: '/health',
    method: 'GET',
    timeout: 5000
  };
  
  const req = http.request(options, (res) => {
    if (res.statusCode === 200) {
      console.log(`‚úÖ Server is healthy on port ${port}`);
      process.exit(0);
    } else {
      console.log(`‚ö†Ô∏è Server responded with status ${res.statusCode}`);
      if (retries > 1) {
        setTimeout(() => checkHealth(port, retries - 1), 2000);
      } else {
        process.exit(1);
      }
    }
  });
  
  req.on('error', (err) => {
    console.log(`‚ùå Health check failed: ${err.message}`);
    if (retries > 1) {
      console.log(`üîÑ Retrying in 2 seconds... (${retries - 1} attempts remaining)`);
      setTimeout(() => checkHealth(port, retries - 1), 2000);
    } else {
      console.log('üí• Server is not responding after 5 attempts');
      process.exit(1);
    }
  });
  
  req.on('timeout', () => {
    req.destroy();
    console.log('‚è∞ Health check timed out');
    if (retries > 1) {
      setTimeout(() => checkHealth(port, retries - 1), 2000);
    } else {
      process.exit(1);
    }
  });
  
  req.end();
};

// Get port from command line args or default to 3000
const port = process.argv[2] || 3000;
checkHealth(port);
```

## üöÄ USAGE INSTRUCTIONS

### For Regular Development:
```bash
# Clean restart (recommended)
npm run clean-start

# Quick restart
npm run restart

# Just kill port conflicts
npm run kill-port
```

### For Replit:
1. **Set run command** to `npm run clean-start`
2. **Update .replit file** with the configuration above
3. **Click "Run"** - it will automatically cleanup and start

### For Manual Debugging:
```bash
# Check what's using port 3000
lsof -i :3000

# Kill all Node processes
pkill -f node

# Kill specific port
lsof -ti:3000 | xargs kill -9

# Check server health
node scripts/healthcheck.js 3000
```

## üß™ TESTING THE SOLUTION

### Test Scenario 1: Port Conflict
1. **Start the app normally**
2. **Start it again** (should auto-cleanup and restart)
3. **Verify no "Cannot GET /" error**

### Test Scenario 2: Process Cleanup
1. **Force quit the app** (Ctrl+C)
2. **Start again immediately**
3. **Should cleanup previous process and start successfully**

### Test Scenario 3: Root Route
1. **Navigate to** `http://localhost:3000/`
2. **Should redirect properly** (not show "Cannot GET /")
3. **Health check** at `/health` should work

## ‚úÖ SUCCESS CRITERIA

After implementing this solution:

‚úÖ **No more "Cannot GET /" errors**  
‚úÖ **Automatic port conflict resolution**  
‚úÖ **Clean process startup every time**  
‚úÖ **Proper root route handling**  
‚úÖ **Health monitoring capabilities**  
‚úÖ **Works in both local and Replit environments**  
‚úÖ **Graceful shutdown and restart**  

## üîÑ PREVENTION STRATEGIES

### 1. **Always Use Clean Start**
Make `npm run clean-start` your default development command.

### 2. **Proper Shutdown**
Always use Ctrl+C to stop the server (enables graceful shutdown).

### 3. **Monitor Health**
Use the `/health` endpoint to verify server status.

### 4. **Environment Variables**
Ensure PORT is properly set in your environment.

This solution provides a bulletproof way to handle port conflicts and routing issues every time you restart your application.