# Phase 1D: Admin Reset & Enhanced Error Handling Implementation

## ðŸŽ¯ IMMEDIATE GOAL
Complete the data persistence system with robust admin reset functionality and enhanced error handling with local storage backup. This finalizes the core workshop data persistence features.

## ðŸ“‹ IMPLEMENTATION AREAS

### 1. Admin Reset Functionality
### 2. Enhanced Error Handling with Local Storage Backup  
### 3. Basic Audit Logging
### 4. Final System Validation

---

## 1. Admin Reset Functionality

### Enhance Existing Admin Reset Endpoint
**Endpoint**: `POST /api/admin/reset-user-data/:userId`

### Required Reset Behavior:
```javascript
// Clear ALL workshop data but preserve profile
const resetUserWorkshopData = async (userId) => {
  try {
    // Clear all userAssessments for this user
    await db.delete(userAssessments)
      .where(eq(userAssessments.userId, userId));
    
    // Clear navigation progress from users table
    await db.update(users)
      .set({ 
        navigationProgress: null 
      })
      .where(eq(users.id, userId));
    
    // PRESERVE these fields in users table:
    // - name, email, profilePicture, organization, jobTitle, username, role
    
    return { success: true, message: 'Workshop data reset successfully' };
  } catch (error) {
    throw new Error('Failed to reset user data');
  }
};
```

### Admin Reset Validation:
```javascript
// In admin-routes.ts
app.post('/api/admin/reset-user-data/:userId', requireAuth, isAdmin, async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const adminId = req.user.id;
    
    // Validate user exists
    const targetUser = await db.select().from(users).where(eq(users.id, userId));
    if (!targetUser.length) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }
    
    // Perform reset
    await resetUserWorkshopData(userId);
    
    // Basic audit logging
    console.log(`Admin ${adminId} reset workshop data for user ${userId} at ${new Date().toISOString()}`);
    
    res.json({
      success: true,
      message: `Workshop data reset for user ${targetUser[0].username}`
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to reset user data'
    });
  }
});
```

---

## 2. Enhanced Error Handling with Local Storage Backup

### Local Storage Backup System
```javascript
// utils/localStorage.js - Create this utility
const LOCAL_STORAGE_PREFIX = 'ast_backup_';

export const saveToLocalStorage = (assessmentType, data, userId) => {
  try {
    const key = `${LOCAL_STORAGE_PREFIX}${userId}_${assessmentType}`;
    const backupData = {
      data,
      timestamp: new Date().toISOString(),
      assessmentType,
      status: 'pending_sync'
    };
    localStorage.setItem(key, JSON.stringify(backupData));
    console.log(`Data backed up locally for ${assessmentType}`);
  } catch (error) {
    console.error('Failed to save to localStorage:', error);
  }
};

export const getFromLocalStorage = (assessmentType, userId) => {
  try {
    const key = `${LOCAL_STORAGE_PREFIX}${userId}_${assessmentType}`;
    const stored = localStorage.getItem(key);
    return stored ? JSON.parse(stored) : null;
  } catch (error) {
    console.error('Failed to read from localStorage:', error);
    return null;
  }
};

export const clearLocalStorage = (assessmentType, userId) => {
  try {
    const key = `${LOCAL_STORAGE_PREFIX}${userId}_${assessmentType}`;
    localStorage.removeItem(key);
  } catch (error) {
    console.error('Failed to clear localStorage:', error);
  }
};

export const getAllPendingBackups = (userId) => {
  const backups = [];
  try {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith(`${LOCAL_STORAGE_PREFIX}${userId}_`)) {
        const data = JSON.parse(localStorage.getItem(key));
        if (data.status === 'pending_sync') {
          backups.push({ key, ...data });
        }
      }
    }
  } catch (error) {
    console.error('Failed to get pending backups:', error);
  }
  return backups;
};
```

### Enhanced Save Function with Backup
```javascript
// Enhanced save function for all components
const saveWithBackup = async (data, endpoint, assessmentType, userId) => {
  const maxRetries = 3;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // Success - clear any local backup
          clearLocalStorage(assessmentType, userId);
          return { success: true };
        }
      }
      throw new Error('Save failed');
    } catch (error) {
      if (attempt === maxRetries) {
        // Final attempt failed - save to localStorage
        saveToLocalStorage(assessmentType, data, userId);
        console.log(`Saved ${assessmentType} to local storage after ${maxRetries} failed attempts`);
        return { success: false, backed_up: true };
      } else {
        // Wait before retry with exponential backoff
        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
      }
    }
  }
};
```

### Auto-Sync Pending Backups
```javascript
// Auto-sync component - add to main app layout
const AutoSync = ({ userId }) => {
  useEffect(() => {
    const syncPendingBackups = async () => {
      const pendingBackups = getAllPendingBackups(userId);
      
      for (const backup of pendingBackups) {
        try {
          const endpoint = getEndpointForAssessmentType(backup.assessmentType);
          const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify(backup.data)
          });
          
          if (response.ok) {
            const result = await response.json();
            if (result.success) {
              // Clear successful backup
              localStorage.removeItem(backup.key);
              console.log(`Synced ${backup.assessmentType} from local storage`);
            }
          }
        } catch (error) {
          console.log(`Failed to sync ${backup.assessmentType}, will retry later`);
        }
      }
    };
    
    // Sync on component mount and every 30 seconds
    syncPendingBackups();
    const interval = setInterval(syncPendingBackups, 30000);
    
    return () => clearInterval(interval);
  }, [userId]);
  
  return null; // This component has no UI
};

// Helper function to map assessment types to endpoints
const getEndpointForAssessmentType = (assessmentType) => {
  const endpoints = {
    'starCard': '/api/workshop-data/starcard',
    'flowAttributes': '/api/workshop-data/flow-attributes',
    'roundingOutReflection': '/api/workshop-data/rounding-out',
    'futureSelfReflection': '/api/workshop-data/future-self',
    'cantrilLadder': '/api/workshop-data/cantril-ladder',
    'finalReflection': '/api/workshop-data/final-insights'
  };
  return endpoints[assessmentType] || '/api/workshop-data/assessments';
};
```

---

## 3. Basic Audit Logging

### Simple Audit Log System
```javascript
// In admin-routes.ts - add logging for admin actions
const logAdminAction = (adminId, action, targetUserId, details = '') => {
  const logEntry = {
    timestamp: new Date().toISOString(),
    adminId,
    action,
    targetUserId,
    details,
    ipAddress: req.ip || 'unknown'
  };
  
  // Simple console logging (can be enhanced to database later)
  console.log('ADMIN_ACTION:', JSON.stringify(logEntry));
  
  // Optional: Save to a simple audit log file or database table
  // This can be enhanced in Phase 2
};

// Use in admin endpoints
app.post('/api/admin/reset-user-data/:userId', requireAuth, isAdmin, async (req, res) => {
  const userId = parseInt(req.params.userId);
  const adminId = req.user.id;
  
  try {
    await resetUserWorkshopData(userId);
    
    // Log the action
    logAdminAction(adminId, 'RESET_USER_DATA', userId, `Reset workshop data for user ${userId}`);
    
    res.json({ success: true, message: 'Workshop data reset successfully' });
  } catch (error) {
    logAdminAction(adminId, 'RESET_USER_DATA_FAILED', userId, error.message);
    res.status(500).json({ success: false, error: 'Reset failed' });
  }
});
```

---

## 4. System Validation & Testing

### Data Persistence Validation
```javascript
// Add validation endpoint for testing
app.get('/api/admin/validate-user-data/:userId', requireAuth, isAdmin, async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    // Get all assessments for user
    const assessments = await db.select()
      .from(userAssessments)
      .where(eq(userAssessments.userId, userId));
    
    // Get navigation progress
    const user = await db.select({ navigationProgress: users.navigationProgress })
      .from(users)
      .where(eq(users.id, userId));
    
    const validation = {
      userId,
      assessmentCount: assessments.length,
      assessmentTypes: assessments.map(a => a.assessmentType),
      hasNavigationProgress: !!user[0]?.navigationProgress,
      dataIntegrity: 'valid'
    };
    
    res.json({ success: true, validation });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Validation failed' });
  }
});
```

### Complete Testing Checklist

#### Phase 1D Testing:
- [ ] **Admin Reset**: Reset user data, verify assessments cleared but profile preserved
- [ ] **Local Storage Backup**: Disconnect network, make changes, verify local backup works  
- [ ] **Auto-Sync**: Reconnect network, verify backed up data syncs to server
- [ ] **Audit Logging**: Check console logs for admin actions
- [ ] **Error Recovery**: Test various failure scenarios

#### Full System Testing:
- [ ] **Phase 1B**: Text reflections auto-save and persist
- [ ] **Phase 1C**: Assessment scores save immediately and persist  
- [ ] **Phase 1D**: Admin reset and error recovery work
- [ ] **Integration**: All phases work together seamlessly

---

## Files to Modify

### New Files to Create:
- `client/src/utils/localStorage.js` - Local storage backup utilities
- `client/src/components/AutoSync.tsx` - Auto-sync component

### Files to Enhance:
- `server/routes/admin-routes.ts` - Enhanced reset endpoint and audit logging
- `server/services/reset-service.ts` - Improved reset functionality  
- `client/src/components/content/*.tsx` - Add enhanced error handling to all assessment components

---

## Success Criteria for Phase 1D

âœ… **Admin Reset**: Clears all workshop data but preserves user profile  
âœ… **Local Storage Backup**: Failed saves automatically backup locally  
âœ… **Auto-Sync**: Backed up data syncs when connection restored  
âœ… **Audit Logging**: Admin actions are logged with timestamp and details  
âœ… **Error Recovery**: System handles network failures gracefully  
âœ… **Complete System**: All phases work together for full data persistence  

## Implementation Priority

1. **Enhanced admin reset** - ensure proper data separation
2. **Local storage backup** - add to existing save functions  
3. **Auto-sync component** - add to main app layout
4. **Audit logging** - add to admin endpoints
5. **System testing** - validate all phases work together

Claude, implement Phase 1D following this specification. Focus on completing the robust data persistence system with proper admin controls and error recovery.

Report back when the complete system is working: text persistence, assessment persistence, admin reset, and error recovery with local storage backup.