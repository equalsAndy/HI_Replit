# REPLIT AGENT: Implement Workshop Locking for Step 4-5 (FinalReflectionView)

## üéØ **Task Objective**
Add complete workshop locking implementation to `FinalReflectionView.tsx` following the established pattern from working steps 4-3 and 4-4.

## üìÅ **File to Modify**
`client/src/components/content/FinalReflectionView.tsx`

## üîß **Required Changes**

### **1. Add Workshop Status Hook Import**
Add to existing imports:
```typescript
import { useWorkshopStatus } from '@/hooks/use-workshop-status';
```

### **2. Add Workshop Status Hook Usage**
Add after existing useState declarations (around line 35):
```typescript
const { completed, loading, isWorkshopLocked, testCompleteWorkshop } = useWorkshopStatus();
```

### **3. Add Red Test Button**
Replace the existing return statement opening:
```typescript
// BEFORE:
return (
  <>
    <div className="final-reflection-container">

// AFTER:
return (
  <>
    {/* TEMPORARY TEST BUTTON - Remove after testing */}
    <div style={{ position: 'fixed', top: '10px', right: '10px', zIndex: 9999, background: 'red', color: 'white', padding: '10px', cursor: 'pointer', borderRadius: '5px' }}>
      <div>Workshop Status: {completed ? 'üîí LOCKED' : 'üîì UNLOCKED'}</div>
      <button onClick={testCompleteWorkshop} style={{ marginTop: '5px', padding: '5px', backgroundColor: 'darkred', color: 'white', border: 'none', borderRadius: '3px', cursor: 'pointer' }}>
        Test Lock Workshop
      </button>
    </div>

    {/* Workshop Completion Banner */}
    {completed && (
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6 max-w-4xl mx-auto mt-4">
        <div className="flex items-center gap-3">
          <FileText className="text-green-600" size={20} />
          <div className="flex-1">
            <h3 className="font-medium text-green-800">
              Step 4-5: Final Reflection Completed
            </h3>
            <p className="text-sm text-green-600">
              Your responses are locked, but you can still view content and navigate.
            </p>
          </div>
          <div className="text-green-600">
            üîí
          </div>
        </div>
      </div>
    )}

    <div className="final-reflection-container">
```

### **4. Update Textarea to Support Locking**
Replace the textarea section (around line 230):
```typescript
// BEFORE:
<textarea
  className={`insight-input ${isStepCompleted ? 'readonly' : ''} ${validationError ? 'border-red-300 focus:border-red-500' : ''}`}
  value={insight}
  onChange={isStepCompleted ? undefined : (e) => handleInsightChange(e.target.value)}
  disabled={isStepCompleted}
  readOnly={isStepCompleted}
  placeholder={isStepCompleted ? '' : "What I want to carry forward is..."}
  rows={4}
/>

// AFTER:
<textarea
  className={`insight-input ${isStepCompleted || completed ? 'readonly' : ''} ${validationError ? 'border-red-300 focus:border-red-500' : ''}`}
  value={insight}
  onChange={isStepCompleted || completed ? undefined : (e) => handleInsightChange(e.target.value)}
  disabled={isStepCompleted || completed}
  readOnly={isStepCompleted || completed}
  placeholder={isStepCompleted || completed ? (completed ? "This workshop is completed and locked for editing" : "") : "What I want to carry forward is..."}
  rows={4}
/>
```

### **5. Update Validation Message Display**
Replace the validation message section:
```typescript
// BEFORE:
{!isStepCompleted && (
  <ValidationMessage 
    message={validationError} 
    type="error" 
    show={!!validationError}
  />
)}

// AFTER:
{!isStepCompleted && !completed && (
  <ValidationMessage 
    message={validationError} 
    type="error" 
    show={!!validationError}
  />
)}
```

### **6. Update Action Section Logic**
Replace the action section (around line 250):
```typescript
// BEFORE:
<div className="action-section">
  {!isStepCompleted ? (
    // Original completion flow for first-time users
    <>
      <div className="flex items-center justify-center gap-3">
        {isTestUser && (
          <button
            onClick={fillWithDemoData}
            className="demo-button-inline"
            type="button"
          >
            <FileText className="demo-icon" />
            Add Demo Data
          </button>
        )}

// AFTER:
<div className="action-section">
  {!isStepCompleted && !completed ? (
    // Original completion flow for first-time users
    <>
      <div className="flex items-center justify-center gap-3">
        {isTestUser && (
          <button
            onClick={fillWithDemoData}
            className="demo-button-inline"
            type="button"
          >
            <FileText className="demo-icon" />
            Add Demo Data
          </button>
        )}
```

### **7. Add Workshop Locked Completion State**
Add new completion state after the existing completion flow:
```typescript
// Add this AFTER the existing completion flow (around line 280):
) : completed ? (
  // Workshop completed via locking system
  <div className="completed-section">
    <div className="completion-indicator">
      <span className="checkmark">‚úÖ</span>
      <p className="completed-text">AllStarTeams Workshop Completed & Locked!</p>
    </div>
    
    <p className="text-sm text-gray-600 text-center mt-4">
      Your workshop has been completed and locked. You can view your results below.
    </p>
    
    <div className="flex justify-center mt-4">
      <button
        onClick={() => setShowModal(true)}
        className="continue-button enabled"
      >
        View Options
      </button>
    </div>
  </div>
```

### **8. Keep Existing Natural Completion State**
Ensure the existing natural completion state remains unchanged:
```typescript
) : (
  // Completed state via natural completion flow
  <div className="completed-section">
    <div className="completion-indicator">
      <span className="checkmark">‚úÖ</span>
      <p className="completed-text">You have completed your AllStarTeams Workshop!</p>
    </div>
    
    <p className="text-sm text-gray-600 text-center mt-4">
      Your answers have been saved. You can now review your Star Card, your Holistic Report, and other next steps.
    </p>
  </div>
)}
```

## ‚úÖ **Success Criteria**

After implementation:
- [ ] Red test button appears in top-right corner
- [ ] Button toggles between üîì UNLOCKED and üîí LOCKED
- [ ] Textarea becomes disabled and shows lock placeholder when locked
- [ ] Demo button hidden when locked
- [ ] Validation messages hidden when locked
- [ ] Completion banner appears when locked
- [ ] "View Options" button available when locked
- [ ] All existing functionality preserved

## üß™ **Testing Instructions**

1. **Load Step 4-5** in browser
2. **Verify red test button** appears in top-right
3. **Click test button** to toggle lock state
4. **Confirm visual changes**:
   - Textarea becomes disabled and grayed out
   - Demo button disappears 
   - Completion banner appears
   - Placeholder text shows lock message
5. **Test navigation** still works when locked

## üìã **Important Notes**

- **Follow exact pattern** from Steps 4-3 and 4-4
- **Preserve all existing functionality** for natural completion flow
- **Test both locked and unlocked states** thoroughly
- **Ensure demo button only shows for test users when unlocked**
- **Keep completion modal functionality intact**

## üéØ **Workshop Context**

This is Step 4-5 (Final Reflection) of the AST workshop. It's the completion step where users reflect on their journey and choose next steps. The locking system prevents editing after completion while preserving navigation and viewing capabilities.

---

**File Location**: `client/src/components/content/FinalReflectionView.tsx`
**Priority**: High - Completes workshop locking implementation for Section 4
**Testing**: Red test button pattern established in Steps 4-3 and 4-4