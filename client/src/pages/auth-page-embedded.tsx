import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { PasswordInput } from '@/components/ui/password-input';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link } from 'wouter';\nimport { Loader2, AlertCircle, X, Mail, Lock } from 'lucide-react';\nimport HiLogo from '@/assets/HI_Logo_horizontal.png';\nimport AllStarTeamsLogo from '@/assets/all-star-teams-logo-250px.png';\nimport ImaginalAgilityLogo from '@/assets/imaginal_agility_logo_nobkgrd.png';\nimport { useSessionMessage } from '@/hooks/use-session-manager';\nimport auth0 from 'auth0-js';\n\n// Auth0 WebAuth instance for embedded login\nconst auth0Client = new auth0.WebAuth({\n  domain: import.meta.env.VITE_AUTH0_DOMAIN!,\n  clientID: import.meta.env.VITE_AUTH0_CLIENT_ID!,\n  redirectUri: import.meta.env.VITE_AUTH0_REDIRECT_URI!,\n  audience: import.meta.env.VITE_AUTH0_AUDIENCE,\n  responseType: 'token id_token',\n  scope: 'openid profile email'\n});\n\n// Define the login form schema\nconst loginFormSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required'),\n});\n\ntype LoginFormValues = z.infer<typeof loginFormSchema>;\n\nconst AuthPageEmbedded: React.FC = () => {\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedApp, setSelectedApp] = useState<string | null>(null);\n  const { message: sessionMessage, clearMessage } = useSessionMessage();\n\n  // Parse URL parameters to get the app selection\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const app = searchParams.get('app');\n    if (app) {\n      setSelectedApp(app);\n      sessionStorage.setItem('selectedApp', app);\n    } else {\n      const storedApp = sessionStorage.getItem('selectedApp');\n      if (storedApp) {\n        setSelectedApp(storedApp);\n      }\n    }\n  }, [location]);\n\n  // Handle Auth0 callback on page load\n  useEffect(() => {\n    // Check if we're on the callback URL\n    if (window.location.pathname === '/auth/callback') {\n      auth0Client.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          // Store tokens\n          localStorage.setItem('access_token', authResult.accessToken);\n          localStorage.setItem('id_token', authResult.idToken);\n          localStorage.setItem('expires_at', JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime()));\n          \n          // Create session on your backend\n          createSession(authResult.idToken)\n            .then(() => {\n              // Redirect to dashboard\n              setLocation('/dashboard');\n            })\n            .catch(error => {\n              console.error('Session creation failed:', error);\n              toast({\n                variant: 'destructive',\n                title: 'Login failed',\n                description: 'Failed to create session. Please try again.',\n              });\n            });\n        } else if (err) {\n          console.error('Auth0 callback error:', err);\n          toast({\n            variant: 'destructive',\n            title: 'Login failed',\n            description: err.errorDescription || 'Authentication failed',\n          });\n          // Redirect back to auth page\n          setLocation('/auth');\n        }\n      });\n    }\n  }, [setLocation, toast]);\n\n  // Create session on backend with Auth0 token\n  const createSession = async (idToken: string) => {\n    const response = await fetch('/api/auth/auth0-session', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${idToken}`\n      },\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create session');\n    }\n\n    return response.json();\n  };\n\n  // Initialize form\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginFormSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  // Handle embedded login with Auth0\n  const onSubmit = async (data: LoginFormValues) => {\n    setIsLoggingIn(true);\n    \n    auth0Client.login({\n      realm: 'Username-Password-Authentication', // Your database connection name\n      username: data.email,\n      password: data.password,\n    }, (err, authResult) => {\n      setIsLoggingIn(false);\n      \n      if (err) {\n        console.error('Auth0 login error:', err);\n        toast({\n          variant: 'destructive',\n          title: 'Login failed',\n          description: err.description || 'Invalid email or password',\n        });\n        return;\n      }\n\n      // Success - tokens will be handled by the callback\n      toast({\n        title: 'Login successful',\n        description: 'Welcome back!',\n      });\n    });\n  };\n\n  // Get session message display text\n  const getSessionMessageText = (message: string) => {\n    switch (message) {\n      case 'logged-out':\n        return 'You have been logged out';\n      case 'session-expired':\n        return 'Your session has expired';\n      case 'session-timeout':\n        return 'Session timed out due to inactivity';\n      case 'login-required':\n        return 'Please log in to continue';\n      case 'server-restart':\n        return 'Please log in again';\n      case 'permission-denied':\n        return 'Access denied - please log in';\n      default:\n        return 'Please log in to continue';\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <header className=\"container mx-auto py-6\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          {/* Main HI Logo */}\n          <Link href=\"/\">\n            <img \n              src={HiLogo} \n              alt=\"Heliotrope Imaginal\"\n              className=\"h-12 w-auto\"\n            />\n          </Link>\n          \n          {/* Workshop Logos */}\n          <div className=\"flex items-center space-x-8\">\n            <img \n              src={AllStarTeamsLogo} \n              alt=\"AllStarTeams\" \n              className=\"h-10 w-auto opacity-80\"\n            />\n            <img \n              src={ImaginalAgilityLogo} \n              alt=\"Imaginal Agility\" \n              className=\"h-10 w-auto opacity-80\"\n            />\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        {/* Session Message Banner */}\n        {sessionMessage && (\n          <div className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50 w-full max-w-md\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 shadow-md\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertCircle className=\"h-5 w-5 text-blue-600\" />\n                  <span className=\"text-blue-800 font-medium\">\n                    {getSessionMessageText(sessionMessage)}\n                  </span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={clearMessage}\n                  className=\"h-6 w-6 p-0 text-blue-600 hover:text-blue-800\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Welcome Back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to your Heliotrope Imaginal account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                          <Input \n                            {...field} \n                            type=\"email\"\n                            placeholder=\"Enter your email address\"\n                            disabled={isLoggingIn}\n                            className=\"pl-10\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                          <PasswordInput \n                            {...field}\n                            placeholder=\"Enter your password\"\n                            disabled={isLoggingIn}\n                            className=\"pl-10\"\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoggingIn}>\n                  {isLoggingIn ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    <>\n                      <Lock className=\"mr-2 h-4 w-4\" />\n                      Sign In\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-3 text-center text-sm text-muted-foreground\">\n            <div className=\"flex items-center justify-center w-full\">\n              <div className=\"flex-1 border-t border-gray-200\"></div>\n              <div className=\"px-3 text-gray-500 text-xs\">OR</div>\n              <div className=\"flex-1 border-t border-gray-200\"></div>\n            </div>\n            <div className=\"w-full\">\n              <Button variant=\"outline\" asChild className=\"w-full\">\n                <Link href=\"/register\">I have an invitation code</Link>\n              </Button>\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              New to Heliotrope Imaginal? You'll need an invitation code to get started.\n            </div>\n          </CardFooter>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPageEmbedded;