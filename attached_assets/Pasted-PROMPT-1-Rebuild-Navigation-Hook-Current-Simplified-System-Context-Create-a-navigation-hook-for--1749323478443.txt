
PROMPT 1: Rebuild Navigation Hook - Current Simplified System (Enhanced)

CONTEXT: Create a navigation hook for an interactive learning platform with linear step progression.

TARGET FILE: client/src/hooks/use-navigation-progress.ts

DATABASE SCHEMA:
- Table: users (shared/schema.ts)
- Column: navigationProgress (TEXT, stores JSON string)
- CRITICAL: Maximum 2 levels of JSON nesting allowed
- Primary API Endpoints: 
  - POST /api/user/navigation-progress (sync progress)
  - GET /api/user/profile (load progress)
- Assessment API: GET /api/workshop-data/userAssessments

HARDWIRED RULES:

Step Sequence: ['1-1', '2-1', '2-2', '2-3', '2-4', '3-1', '3-2', '3-3', '3-4', '4-1', '4-2', '4-3', '4-4', '4-5']

Video Steps: ['1-1', '2-1', '2-3', '3-1', '3-3', '4-1', '4-4']

Assessment Validation Mapping:
- '2-2' requires userAssessments.starCard
- '3-2' requires userAssessments.flowAssessment  
- '4-1' requires userAssessments.cantrilLadder
- '4-2' requires userAssessments.cantrilLadderReflection

First Step: Always unlock '1-1'

Linear Progression Logic: N completed â†’ N+1 unlocked

FEATURE FLAG SYSTEM:
```typescript
const PROGRESSION_MODE = {
  SIMPLIFIED: 'simplified',
  COMPLEX: 'complex'
} as const;

const CURRENT_PROGRESSION_MODE = 'simplified' as const;
```

GLOBAL STATE MANAGEMENT (Critical):
```typescript
// Window-level video progress tracking
(window as any).currentVideoProgress = {
  [stepId]: { farthest: number; current: number }
}
```

DATABASE STRUCTURE (JSON Schema - MAX 2 LEVELS):
```typescript
interface NavigationProgress {
  completedSteps: string[];
  currentStepId: string;
  appType: 'ast' | 'ia';
  lastVisitedAt: string;
  unlockedSteps: string[];
  videoProgress: { [stepId: string]: { farthest: number; current: number } };
  // REMOVED: No nested navigationProgress property allowed
}
```

JSON NESTING SAFEGUARDS (Critical Implementation):
1. **Flat Structure Only**: Never nest NavigationProgress objects
2. **Parse Error Recovery**: Handle malformed JSON with default state
3. **Atomic Merge Logic**: Use Math.max() for video progress to prevent regression
4. **Validation**: Reject updates with nesting depth > 2 levels
5. **Cleanup**: Strip any nested navigationProgress properties before saving

REACT QUERY INTEGRATION:
```typescript
const { data: userAssessments = {} } = useQuery({
  queryKey: ['user-assessments'],
  queryFn: () => fetch('/api/workshop-data/userAssessments')
})
```

TYPESCRIPT INTERFACES (Required):
```typescript
interface NavigationProgress {
  completedSteps: string[];
  currentStepId: string;
  appType: 'ast' | 'ia';
  lastVisitedAt: string;
  unlockedSteps: string[];
  videoProgress: { [stepId: string]: { farthest: number; current: number } };
}

interface VideoProgressData {
  farthest: number;
  current: number;
}
```

DEBOUNCED SYNC PATTERN:
```typescript
const debouncedSync = useRef<NodeJS.Timeout>();
const scheduleSync = (progressData: NavigationProgress) => {
  if (debouncedSync.current) {
    clearTimeout(debouncedSync.current);
  }
  debouncedSync.current = setTimeout(() => {
    syncToDatabase(progressData);
  }, 1000);
};
```

ERROR HANDLING PATTERNS:
1. **JSON Parse Errors**: Default to initial state
2. **Network Failures**: Graceful degradation with local state
3. **Concurrent Updates**: Last-write-wins with atomic video progress merge
4. **Assessment API Failures**: Default to empty object {}

VALIDATION FUNCTIONS (Required):
```typescript
// SIMPLIFIED MODE: Only validate non-video requirements
const validateStepCompletionSimplified = (stepId: string, userAssessments: any): boolean => {
  // Assessment steps - still require completion
  if (stepId === '2-2') return !!userAssessments?.starCard;
  if (stepId === '3-2') return !!userAssessments?.flowAssessment;
  if (stepId === '4-1') return !!userAssessments?.cantrilLadder;
  if (stepId === '4-2') return !!userAssessments?.cantrilLadderReflection;
  
  // All other steps: Next button always active
  return true;
};

// Linear progression calculation
const calculateUnlockedSteps = (completedSteps: string[]): string[] => {
  const allSteps = ['1-1', '2-1', '2-2', '2-3', '2-4', '3-1', '3-2', '3-3', '3-4', '4-1', '4-2', '4-3', '4-4', '4-5'];
  const unlocked = ['1-1']; // First step always unlocked
  
  for (let i = 0; i < allSteps.length - 1; i++) {
    const currentStep = allSteps[i];
    const nextStep = allSteps[i + 1];
    
    if (completedSteps.includes(currentStep)) {
      unlocked.push(nextStep);
    }
  }
  
  return unlocked;
};
```

CONSOLE LOGGING PATTERN:
```typescript
// Mode-aware logging with emoji prefixes
console.log('ðŸ”„ SIMPLIFIED MODE: Loading progress from database...');
console.log('âœ… SIMPLIFIED MODE: Progress loaded from database');
console.log('ðŸŽ¬ VIDEO PROGRESS TRACKED (SIMPLIFIED MODE - not used for unlocking): ${stepId} = ${percentage}%');
console.log('ðŸ“Š SIMPLIFIED MODE: Video progress saved but not used for step completion');
```

VIDEO PROGRESS TRACKING:
```typescript
const updateVideoProgress = (stepId: string, percentage: number, isResumption: boolean = false) => {
  const normalizedProgress = Math.min(100, Math.max(0, percentage));
  
  // Initialize global tracking
  if (!(window as any).currentVideoProgress) {
    (window as any).currentVideoProgress = {};
  }
  
  if (!(window as any).currentVideoProgress[stepId]) {
    (window as any).currentVideoProgress[stepId] = {
      farthest: 0,
      current: normalizedProgress
    };
  }
  
  const globalData = (window as any).currentVideoProgress[stepId] as VideoProgressData;
  
  if (isResumption) {
    globalData.current = normalizedProgress;
  } else {
    globalData.current = normalizedProgress;
    globalData.farthest = Math.max(globalData.farthest, normalizedProgress);
  }
  
  // Update state with atomic merge
  setProgress(prev => {
    const newProgress = {
      ...prev,
      videoProgress: {
        ...prev.videoProgress,
        [stepId]: {
          farthest: Math.max(globalData.farthest, prev.videoProgress[stepId]?.farthest || 0),
          current: normalizedProgress
        }
      },
      lastVisitedAt: new Date().toISOString()
    };
    
    // Schedule database sync
    scheduleSync(newProgress);
    
    return newProgress;
  });
};
```

RETURN INTERFACE (Required):
```typescript
return {
  progress,
  updateVideoProgress,
  markStepCompleted,
  setCurrentStep,
  isStepAccessible,
  canProceedToNext,
  shouldShowGreenCheckmark,
  getVideoProgress,
  validateStepCompletion,
  isVideoStep: (stepId: string) => ['1-1', '2-1', '2-3', '3-1', '3-3', '4-1', '4-4'].includes(stepId),
  CURRENT_PROGRESSION_MODE
};
```

LEGACY COMPATIBILITY:
- Export aliases for backward compatibility
- Maintain dual tracking for future feature restoration
- Section progress calculation helpers
- Resume functionality for video positions

CRITICAL IMPLEMENTATION NOTES:
1. **Prevent JSON Nesting**: Never create navigationProgress.navigationProgress
2. **Atomic Video Updates**: Use Math.max() to prevent progress regression
3. **Mode-Aware Logic**: Simplified mode tracks video but doesn't use for unlocking
4. **Error Recovery**: Default to safe initial state on any parse failure
5. **Performance**: Debounce database writes to 1-second intervals
6. **Debugging**: Extensive console logging for immediate feedback
7. **State Management**: useRef for debouncing, useState for progress tracking
8. **Assessment Integration**: Boolean validation with empty object fallback
