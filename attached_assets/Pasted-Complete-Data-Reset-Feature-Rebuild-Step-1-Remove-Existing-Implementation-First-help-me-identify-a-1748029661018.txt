Complete Data Reset Feature Rebuild
Step 1: Remove Existing Implementation
First, help me identify and completely remove all existing data reset functionality to avoid conflicts:

Search for and remove any existing reset-related components, functions, or API endpoints
Look for files/code containing keywords like "reset", "clear", "delete", or similar data management terms
Remove any broken or incomplete reset modals, buttons, or UI elements
Clean up any related imports, routes, or database queries
Provide a list of what was removed so I can verify

Step 2: Build New Data Reset System
User Data Reset Modal
Create a new modal component with these features:
Data Display Section:

Show current user's local storage data (organized by category)
Display server-side database data for the current user
Focus specifically on workshop-related data and progress
Present data in a clear, readable format (tables, cards, or structured lists)
Include data timestamps and sizes where relevant

Reset Functionality:

Checkbox options to select what to reset:

 Local storage/IndexedDB workshop data
 Server-side workshop progress
 All workshop-related data


Clear confirmation dialog before executing reset
Progress indicator during reset operation
Success/error feedback messages

Admin User Management Panel
Create an admin-only interface that:
User Overview:

Lists all users in the system
Shows basic info (username, email, last active, data size)
Search and filter capabilities
Pagination for large user lists

Admin Reset Powers:

Select any user to view their data (same format as user modal)
Reset data for any selected user
Bulk reset operations for multiple users
Admin action logging for accountability

Step 3: Technical Implementation Requirements
Frontend Components Needed:

DataResetModal.jsx - Main user reset modal
AdminUserPanel.jsx - Admin user management
UserDataDisplay.jsx - Reusable data visualization component
ResetConfirmation.jsx - Confirmation dialog component

Backend API Endpoints:

GET /api/user/data - Fetch current user's data summary
DELETE /api/user/reset - Reset current user's data
GET /api/admin/users - List all users (admin only)
GET /api/admin/user/:id/data - Get specific user's data (admin only)
DELETE /api/admin/user/:id/reset - Reset specific user's data (admin only)

Error Handling & Validation:

Comprehensive try-catch blocks for all operations
User-friendly error messages
Network timeout handling
Rollback mechanisms if reset fails partially
Input validation and sanitization
Admin permission verification

Data Structure to Handle:
Focus on workshop-related data including:

User progress tracking
Completed workshops/modules
Saved work/drafts
User preferences related to workshops
Achievement/milestone data
Time tracking data

Step 4: Implementation Details
Security Considerations:

Implement proper authentication checks
Admin role verification for admin features
CSRF protection for destructive operations
Rate limiting on reset operations
Audit logging for all reset actions

User Experience:

Clear visual hierarchy in data display
Intuitive reset option groupings
Non-destructive preview mode
Undo capability where possible
Loading states and progress indicators
Mobile-responsive design

Data Safety:

Create backups before reset operations
Implement soft deletes where appropriate
Provide data export option before reset
Confirmation emails for significant resets
Recovery options for accidental resets

Step 5: Testing Strategy
Help me create:

Unit tests for all reset functions
Integration tests for the complete reset flow
Admin permission testing
Error scenario testing
Data integrity verification tests

Expected Outcome
A clean, robust data reset system that:

✅ Works reliably without errors
✅ Provides clear data visibility
✅ Offers granular reset options
✅ Includes comprehensive admin tools
✅ Has proper error handling
✅ Maintains data security and user safety

Please start with Step 1 (removing existing code) and then proceed through each step systematically. Ask for clarification on any part before implementing.