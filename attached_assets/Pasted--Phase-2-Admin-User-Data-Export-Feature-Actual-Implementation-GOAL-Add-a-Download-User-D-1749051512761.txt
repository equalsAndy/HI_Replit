# Phase 2: Admin User Data Export Feature - Actual Implementation

## üéØ GOAL
Add a "Download User Data" feature to the Admin User Management page that exports all user data based on the **actual workshop implementation** and assessment schema.

## üìã REQUIREMENTS

### Frontend Changes (UserManagement.tsx)
- Add "Download Data" button to each user row in the admin table
- Implement export functionality with loading states and error handling
- Follow existing admin UI patterns and styling

### Backend Changes (admin-routes.ts)
- Create `GET /api/admin/users/:id/export` endpoint
- Aggregate data from actual schema: `users`, `userAssessments`, `workshopParticipation`
- Structure data matching the **real workshop step implementation**

## üóÑÔ∏è ACTUAL ASSESSMENT SCHEMA (From Real Implementation)

### Assessment Types by Workshop Step:

#### **Step 2-2: Star Self-Assessment** ‚Üí `starCard`
```javascript
{
  thinking: number,    // 0-100%, part of 100% total
  acting: number,      // 0-100%, part of 100% total  
  feeling: number,     // 0-100%, part of 100% total
  planning: number     // 0-100%, part of 100% total
}
```

#### **Step 2-4: Strength Reflection** ‚Üí `stepByStepReflection`  
```javascript
{
  strength1: string,        // Written reflection on strength 1
  strength2: string,        // Written reflection on strength 2
  strength3: string,        // Written reflection on strength 3
  strength4: string,        // Written reflection on strength 4
  teamValues: string,       // Team environment reflection
  uniqueContribution: string // Unique contribution reflection
}
```

#### **Step 3-2: Flow Assessment** ‚Üí `flowAssessment`
```javascript
{
  flowScore: number,        // Calculated score 12-60
  answers: object          // Question responses (1-5 scale)
}
```

#### **Step 3-3: Rounding Out** ‚Üí `roundingOutReflection`
```javascript
{
  strengths: string,        // Core strengths reflection
  values: string,           // Personal values reflection  
  passions: string,         // Passion areas reflection
  growthAreas: string      // Growth and development areas
}
```

#### **Step 3-4: Add Flow to Star Card** ‚Üí `flowAttributes`
```javascript
{
  attributes: string[]      // Array of exactly 4 selected flow attribute names
}
```

#### **Step 4-1: Ladder of Well-being** ‚Üí `cantrilLadder`
```javascript
{
  currentRating: number,    // 0-10 current well-being
  futureRating: number     // 0-10 future well-being
}
```

#### **Step 4-2: Well-being Reflections** ‚Üí `cantrilLadderReflection`
```javascript
{
  currentFactors: string,      // Current well-being factors
  futureImprovements: string,  // Future improvement areas
  specificChanges: string,     // Specific changes planned
  quarterlyProgress: string,   // 3-month progress goals
  quarterlyActions: string     // Quarterly action items
}
```

#### **Step 4-3: Visualizing You** ‚Üí `visualizingPotential`
```javascript
{
  selectedImages: array,    // Array with image URLs
  imageMeaning: string     // Text reflection on image meaning
}
```

#### **Step 4-4: Your Future Self** ‚Üí `futureSelfReflection`
```javascript
{
  futureSelfDescription: string,  // 1-1000 chars
  visualizationNotes: string,     // 1-1000 chars
  additionalNotes: string        // 1-1000 chars
}
```

#### **Step 4-5: Final Reflection** ‚Üí `finalReflection`
```javascript
{
  keyInsights: string,      // Combined reflection input
  actionSteps: string,      // Combined reflection input
  commitments: string       // Combined reflection input
}
```

## üîß COMPLETE EXPORT JSON STRUCTURE

```javascript
{
  "userInfo": {
    "id": 15,
    "username": "participant1",
    "name": "Participant One", 
    "email": "participant1@example.com",
    "role": "participant",
    "organization": "Client Company A",
    "jobTitle": "Team Member",
    "profilePicture": "profile_url_or_base64",
    "isTestUser": true,
    "createdAt": "2025-05-25T15:02:43.180Z",
    "updatedAt": "2025-06-04T01:06:03.766Z"
  },
  "navigationProgress": {
    "completedSteps": ["2-1", "2-2", "2-3", "2-4", "3-1", "3-2", "3-3", "3-4", "4-1", "4-2", "4-3", "4-4", "4-5"],
    "currentStepId": "4-5",
    "appType": "ast", 
    "lastVisitedAt": "2025-06-04T00:58:28.832Z",
    "unlockedSections": ["2", "3", "4"],
    "videoProgress": {
      "2-1": 100.0,   // Intro to Star Strengths - completed
      "2-3": 100.0,   // Review Your Star Card - completed
      "3-1": 100.0,   // Intro to Flow - completed
      "4-1": 85.3     // Ladder of Well-being - partially watched
    }
  },
  "assessments": {
    "starCard": {
      "thinking": 27,
      "acting": 20,
      "feeling": 27,
      "planning": 26,
      "createdAt": "2025-06-03T10:15:00.000Z"
    },
    "stepByStepReflection": {
      "strength1": "I excel at analytical thinking and problem-solving, breaking down complex issues into manageable components...",
      "strength2": "My ability to collaborate effectively with diverse teams stems from strong emotional intelligence...",
      "strength3": "I have developed strong organizational skills that help me manage multiple priorities...",
      "strength4": "My communication skills allow me to translate technical concepts for various audiences...", 
      "teamValues": "I perform best in environments that value open communication, mutual respect, and continuous learning...",
      "uniqueContribution": "My unique combination of technical expertise and interpersonal skills allows me to bridge gaps...",
      "createdAt": "2025-06-03T11:30:00.000Z"
    },
    "flowAssessment": {
      "flowScore": 45,
      "answers": {
        "1": 4, "2": 5, "3": 3, "4": 4, "5": 3,
        "6": 4, "7": 5, "8": 4, "9": 3, "10": 4,
        "11": 3, "12": 4
      },
      "createdAt": "2025-06-03T12:45:00.000Z"
    },
    "roundingOutReflection": {
      "strengths": "My top strengths include strategic thinking, collaboration, and adaptability in changing environments...",
      "values": "I value integrity, continuous learning, and making a positive impact through meaningful work...",
      "passions": "I'm passionate about technology innovation, team development, and creating solutions that matter...", 
      "growthAreas": "Areas where I want to grow include public speaking, delegation, and cross-cultural communication...",
      "createdAt": "2025-06-03T13:20:00.000Z"
    },
    "flowAttributes": {
      "attributes": [
        "Creative Problem Solver",
        "Strategic Thinker", 
        "Team Collaborator",
        "Detail Oriented"
      ],
      "createdAt": "2025-06-03T13:45:00.000Z"
    },
    "cantrilLadder": {
      "currentRating": 6,
      "futureRating": 9,
      "createdAt": "2025-06-03T14:10:00.000Z"
    },
    "cantrilLadderReflection": {
      "currentFactors": "Strong relationships with family and colleagues, meaningful work that aligns with my values, good physical health...",
      "futureImprovements": "Better work-life balance, continued learning opportunities, leadership responsibilities...",
      "specificChanges": "I plan to set clearer boundaries between work and personal time, pursue advanced certifications...",
      "quarterlyProgress": "In 3 months, I want to have established a consistent exercise routine and completed one major project...",
      "quarterlyActions": "1. Join a gym or fitness program, 2. Schedule weekly check-ins with my mentor, 3. Complete online course...",
      "createdAt": "2025-06-03T14:35:00.000Z"
    },
    "visualizingPotential": {
      "selectedImages": [
        {
          "url": "https://images.unsplash.com/photo-success-mountain",
          "source": "unsplash",
          "id": "mountain-success-123"
        },
        {
          "url": "https://images.unsplash.com/photo-team-collaboration", 
          "source": "unsplash",
          "id": "team-collab-456"
        }
      ],
      "imageMeaning": "These images represent my vision of achieving ambitious goals through collaboration and persistence. The mountain symbolizes the challenges I'm ready to overcome, while the team image reflects my belief in collective achievement...",
      "createdAt": "2025-06-03T15:00:00.000Z"
    },
    "futureSelfReflection": {
      "futureSelfDescription": "In three years, I see myself as a confident team leader who brings out the best in others while driving innovation in our field...", 
      "visualizationNotes": "I visualize myself presenting confidently to senior leadership, mentoring junior team members, and leading successful projects...",
      "additionalNotes": "The path forward requires continuous learning, building stronger relationships, and taking calculated risks...",
      "createdAt": "2025-06-03T15:25:00.000Z"
    },
    "finalReflection": {
      "keyInsights": "This workshop has helped me understand that my strengths in analytical thinking and collaboration are my foundation for growth. I've learned that my future success depends on developing my leadership presence while staying true to my collaborative nature...",
      "actionSteps": "I will begin by scheduling monthly one-on-ones with team members, enrolling in a leadership development program, and taking on a project leadership role within the next quarter...",
      "commitments": "I commit to practicing vulnerability-based leadership, continuing to develop my emotional intelligence, and creating opportunities for others to grow alongside me...",
      "createdAt": "2025-06-03T15:50:00.000Z"
    }
  },
  "workshopParticipation": [
    {
      "workshopId": 1,
      "progress": "completed", 
      "completed": true,
      "startedAt": "2025-06-01T09:00:00.000Z",
      "completedAt": "2025-06-03T15:50:00.000Z",
      "lastAccessedAt": "2025-06-03T15:50:00.000Z"
    }
  ],
  "exportMetadata": {
    "exportedAt": "2025-06-04T01:25:00.000Z",
    "exportedBy": "admin_username",
    "dataVersion": "2.0", 
    "workshopSteps": "2-1 through 4-5",
    "totalAssessments": 10
  }
}
```

## üíª BACKEND IMPLEMENTATION

### Export Service Method
```javascript
// In server/services/user-management-service.ts
export const exportUserData = async (userId: number) => {
  try {
    // Get user info
    const user = await db.select().from(users).where(eq(users.id, userId));
    if (!user.length) {
      throw new Error('User not found');
    }

    // Get all assessments
    const assessments = await db.select()
      .from(userAssessments)
      .where(eq(userAssessments.userId, userId));

    // Get workshop participation  
    const participation = await db.select()
      .from(workshopParticipation)
      .where(eq(workshopParticipation.userId, userId));

    // Structure the export data
    const exportData = {
      userInfo: {
        id: user[0].id,
        username: user[0].username,
        name: user[0].name,
        email: user[0].email,
        role: user[0].role,
        organization: user[0].organization,
        jobTitle: user[0].jobTitle,
        profilePicture: user[0].profilePicture,
        isTestUser: user[0].isTestUser,
        createdAt: user[0].createdAt,
        updatedAt: user[0].updatedAt
      },
      navigationProgress: user[0].navigationProgress ? 
        JSON.parse(user[0].navigationProgress) : null,
      assessments: {},
      workshopParticipation: participation,
      exportMetadata: {
        exportedAt: new Date().toISOString(),
        exportedBy: 'admin', // Will be updated with actual admin info
        dataVersion: '2.0',
        workshopSteps: '2-1 through 4-5',
        totalAssessments: assessments.length
      }
    };

    // Process assessments by type with actual field structures
    assessments.forEach(assessment => {
      exportData.assessments[assessment.assessmentType] = {
        ...JSON.parse(assessment.results),
        createdAt: assessment.createdAt
      };
    });

    return exportData;
  } catch (error) {
    throw new Error(`Export failed: ${error.message}`);
  }
};
```

### Export API Endpoint
```javascript
// In server/routes/admin-routes.ts
app.get('/api/admin/users/:userId/export', requireAuth, isAdmin, async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const adminId = req.user.id;
    
    if (isNaN(userId)) {
      return res.status(400).json({
        success: false,
        error: 'Invalid user ID'
      });
    }

    const exportData = await exportUserData(userId);
    
    // Add admin info to metadata
    exportData.exportMetadata.exportedBy = req.user.username || req.user.name;
    
    // Log the export action (Phase 1D audit logging)
    logAdminAction(adminId, 'EXPORT_USER_DATA', userId, 
      `Exported complete workshop data for user ${exportData.userInfo.username}`, req);
    
    // Set headers for file download
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `allstarteams-data-${exportData.userInfo.username}-${timestamp}.json`;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    
    res.json(exportData);
  } catch (error) {
    console.error('Export error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to export user data'
    });
  }
});
```

## üé® FRONTEND IMPLEMENTATION

### Required Imports
```typescript
// Add these imports to UserManagement.tsx
import { Download, Loader2 } from 'lucide-react';
import { toast } from '@/hooks/use-toast'; // or your existing toast implementation
```

### Add Export Button to UserManagement.tsx
```typescript
const [exportingUserId, setExportingUserId] = useState<number | null>(null);

const handleExportUser = async (userId: number, username: string) => {
  try {
    setExportingUserId(userId);
    
    const response = await fetch(`/api/admin/users/${userId}/export`, {
      credentials: 'include'
    });
    
    if (!response.ok) {
      throw new Error('Export failed');
    }
    
    // Trigger download
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `allstarteams-data-${username}-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    
    // Show success feedback
    toast({
      title: "Export successful",
      description: "Complete workshop data exported successfully",
    });
  } catch (error) {
    toast({
      title: "Export failed", 
      description: "Failed to export user data",
      variant: "destructive",
    });
  } finally {
    setExportingUserId(null);
  }
};

// Export button in user table actions
<button
  onClick={() => handleExportUser(user.id, user.username)}
  disabled={exportingUserId === user.id}
  className="inline-flex items-center px-3 py-1 border border-blue-300 text-blue-700 rounded-md hover:bg-blue-50 disabled:opacity-50"
  title="Download complete workshop data including all assessments and reflections"
>
  {exportingUserId === user.id ? (
    <Loader2 className="h-4 w-4 animate-spin" />
  ) : (
    <Download className="h-4 w-4" />
  )}
  <span className="ml-1">Export</span>
</button>
```

## üß™ TESTING REQUIREMENTS

### Test Scenarios:
- [ ] **Complete workshop user**: Export user who finished all steps 2-1 through 4-5
- [ ] **Partial completion**: Export user who completed only some assessments
- [ ] **New user**: Export user with no assessment data
- [ ] **Navigation progress**: Verify video progress and completed steps are included
- [ ] **All assessment types**: Verify all 10 assessment types export correctly
- [ ] **Image data**: Verify visualizingPotential images export properly
- [ ] **Text reflections**: Verify all reflection fields maintain formatting
- [ ] **Admin access**: Verify only admins can export
- [ ] **File download**: Verify JSON file downloads with proper naming
- [ ] **Error handling**: Test with invalid user IDs and network failures

## üéØ SUCCESS CRITERIA

‚úÖ **Complete workshop export** - All 10 assessment types included
‚úÖ **Rich reflection data** - Full text of all user reflections preserved  
‚úÖ **Video progress tracking** - Navigation progress with video timestamps
‚úÖ **Image assets included** - visualizingPotential images properly exported
‚úÖ **Proper file structure** - Clean, readable JSON matching actual schema
‚úÖ **Admin security** - Only admins can export, all actions logged
‚úÖ **File download** - Browser automatically downloads with descriptive filename

## üìÑ FILES TO MODIFY

- `server/services/user-management-service.ts` - Add `exportUserData` method
- `server/routes/admin-routes.ts` - Add export endpoint  
- `client/src/components/admin/UserManagement.tsx` - Add export button

## üîë KEY IMPLEMENTATION NOTES

- **Real assessment schema** - Exports all 10 actual assessment types with correct field names
- **Complete reflection data** - Preserves all user-written reflections from steps 2-4 through 4-5
- **Workshop progression** - Shows exactly which workshop steps user completed
- **Image handling** - Properly exports visualizingPotential image selections
- **Data integrity** - Maintains all relationships between assessments and user progression
- **Admin audit trail** - Uses Phase 1D logging for export actions

This implementation provides a comprehensive export of the **complete AllStarTeams workshop experience** based on your actual step-by-step implementation.