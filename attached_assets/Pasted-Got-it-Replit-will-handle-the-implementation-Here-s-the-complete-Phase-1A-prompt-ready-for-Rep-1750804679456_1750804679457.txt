Got it! Replit will handle the implementation. Here's the complete **Phase 1A prompt** ready for Replit:

---

# Phase 1A: Discernment Database Foundation Implementation

## 🎯 **PROJECT CONTEXT**
You are working on an existing **Imaginal Agility (IA) Workshop** application that already has:
- ✅ Full IA workshop with 8 steps (`ia-1-1` through `ia-8-1`)
- ✅ AllStarTeams (AST) workshop (separate and functional)
- ✅ Wouter routing system
- ✅ Tailwind CSS + shadcn/ui components
- ✅ Drizzle ORM with PostgreSQL database
- ✅ User authentication and progress tracking

## 🚨 **CRITICAL: DO NOT MODIFY**
- **AST Workshop**: Leave AllStarTeams components completely untouched
- **Existing IA Workshop**: Do not alter current IA steps, navigation, or components
- **Current Database**: Only ADD new tables - do not modify existing schemas
- **Authentication**: Use existing auth system - do not change user table
- **Routing**: Only ADD new API routes - do not modify existing routes

## 🎯 **IMPLEMENTATION GOAL**
Create a **NEW database foundation** for discernment training exercises that will be integrated into the IA workshop later. This is **Phase 1A** of a multi-phase implementation:

- **Phase 1A** (this prompt): Database schema + API + seed data
- **Phase 1B** (next prompt): React modal integration into existing `ia-6-1` step
- **Phase 2** (future): Formal assessment system with scoring

## 🔧 **WHAT YOU'RE BUILDING**
A database-driven system that can serve randomized discernment scenarios to users for practice exercises. This will support 3 types of exercises:
1. **Reality Check** (3-second pause + workplace scenario analysis)
2. **Visual Detection** (real vs AI-generated image identification)  
3. **Toolkit Practice** (systematic 5-test framework application)

## 🗄️ **DATABASE IMPLEMENTATION**

### **1. Create New Migration File**
**Location**: `server/db/migrations/[timestamp]_create_discernment_tables.sql`

```sql
-- Create discernment scenarios table
CREATE TABLE discernment_scenarios (
  id SERIAL PRIMARY KEY,
  exercise_type VARCHAR(50) NOT NULL CHECK (exercise_type IN ('reality_check', 'visual_detection', 'toolkit_practice')),
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  questions JSONB NOT NULL,
  metadata JSONB DEFAULT '{}',
  difficulty_level INTEGER DEFAULT 1 CHECK (difficulty_level BETWEEN 1 AND 3),
  tags TEXT[] DEFAULT ARRAY[]::TEXT[],
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create user progress tracking table
CREATE TABLE user_discernment_progress (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  scenarios_seen JSONB DEFAULT '[]',
  last_session_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  total_sessions INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id)
);

-- Create indexes
CREATE INDEX idx_discernment_scenarios_type ON discernment_scenarios(exercise_type);
CREATE INDEX idx_discernment_scenarios_active ON discernment_scenarios(active);
CREATE INDEX idx_user_discernment_progress_user_id ON user_discernment_progress(user_id);
```

### **2. Add Drizzle Schema Definitions**
**Location**: `shared/schema.ts` (ADD to existing schema, don't modify existing tables)

```typescript
// ADD these to existing schema.ts file
export const discernmentScenarios = pgTable('discernment_scenarios', {
  id: serial('id').primaryKey(),
  exerciseType: varchar('exercise_type', { length: 50 }).notNull(),
  title: varchar('title', { length: 255 }).notNull(),
  content: text('content').notNull(),
  questions: jsonb('questions').notNull(),
  metadata: jsonb('metadata').default('{}'),
  difficultyLevel: integer('difficulty_level').default(1),
  tags: text('tags').array(),
  active: boolean('active').default(true),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
});

export const userDiscernmentProgress = pgTable('user_discernment_progress', {
  id: serial('id').primaryKey(),
  userId: integer('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),
  scenariosSeen: jsonb('scenarios_seen').default('[]'),
  lastSessionAt: timestamp('last_session_at').defaultNow(),
  totalSessions: integer('total_sessions').default(0),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
}, (table) => ({
  userIdIdx: index('idx_user_discernment_progress_user_id').on(table.userId),
  userIdUnique: unique().on(table.userId)
}));
```

### **3. Create Seed Data File**
**Location**: `server/db/seeds/discernment-scenarios.ts`

```typescript
export const discernmentSeedData = [
  // Reality Check Scenarios (3)
  {
    exercise_type: 'reality_check',
    title: 'Mandatory AI Training Announcement',
    content: `<h3>Major Tech Company Announces Mandatory AI Training for All Employees</h3><p>"TechCorp will require all 45,000 employees to complete 40 hours of AI certification by December 31st or face termination. The leaked internal memo reveals concerns about human relevance in the workplace."</p>`,
    questions: [
      {
        question: "What was your immediate emotional response?",
        options: ["Anxiety about job security", "Skepticism about the source", "Curiosity about verification", "Urge to share with colleagues"],
        correct: 1,
        explanation: "Healthy skepticism is the best first response to workplace rumors."
      }
    ],
    metadata: { timer_seconds: 3, difficulty: 2 }
  },
  {
    exercise_type: 'reality_check',
    title: 'Remote Work Productivity Study',
    content: `<h3>New Research: Remote Workers 40% Less Productive, Study Shows</h3><p>"The Institute for Workplace Excellence found remote workers complete 40% fewer tasks than office colleagues."</p>`,
    questions: [
      {
        question: "What would you verify first?",
        options: ["Whether the institute exists", "The study methodology", "Who funded the research", "All of these"],
        correct: 3,
        explanation: "Professional claims require systematic verification."
      }
    ],
    metadata: { timer_seconds: 3, difficulty: 3 }
  },
  {
    exercise_type: 'reality_check',
    title: 'AWS Global Outage Report',
    content: `<h3>Breaking: AWS Experiences Global Outage</h3><p>"Amazon Web Services reported widespread disruptions at 2:47 PM EST. Status page confirms incident with 4-6 hour restoration estimate."</p>`,
    questions: [
      {
        question: "How does this differ from manipulative content?",
        options: ["Specific timestamps", "Official source confirmation", "No emotional manipulation", "All of the above"],
        correct: 3,
        explanation: "Legitimate news includes verifiable details and factual reporting."
      }
    ],
    metadata: { timer_seconds: 3, difficulty: 1 }
  },

  // Visual Detection Scenarios (3)
  {
    exercise_type: 'visual_detection',
    title: 'Tech CEO Conference',
    content: 'Tech CEO announces revolutionary AI breakthrough at industry conference',
    questions: [
      {
        question: "Is this image real or AI-generated?",
        options: ["Real", "Fake"],
        correct: 1,
        explanation: "Check lighting consistency, facial proportions, and background details for manipulation signs."
      }
    ],
    metadata: { 
      image_url: 'https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=800&q=80',
      clues: ["Check lighting consistency", "Look for unnatural proportions", "Examine background details"],
      difficulty: 2
    }
  },
  {
    exercise_type: 'visual_detection',
    title: 'Executive Video Call',
    content: 'Executive team video call discussing Q4 strategy',
    questions: [
      {
        question: "Is this image real or AI-generated?",
        options: ["Real", "Fake"],
        correct: 1,
        explanation: "AI-generated meeting photos often show impossible perfection and unnatural symmetry."
      }
    ],
    metadata: { 
      image_url: 'https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=800&q=80',
      clues: ["Perfect eye contact", "Unnaturally consistent lighting", "Too-perfect symmetry"],
      difficulty: 3
    }
  },
  {
    exercise_type: 'visual_detection',
    title: 'Company Retreat',
    content: 'Annual company retreat team building session - Photo by Alex Johnson/CorpEvents',
    questions: [
      {
        question: "Is this image real or AI-generated?",
        options: ["Real", "Fake"],
        correct: 0,
        explanation: "Professional attribution, natural lighting, and authentic expressions indicate real photography."
      }
    ],
    metadata: { 
      image_url: 'https://images.unsplash.com/photo-1552664730-d307ca884978?w=800&q=80',
      clues: ["Clear photographer attribution", "Natural lighting", "Authentic expressions"],
      difficulty: 1
    }
  },

  // Toolkit Practice Scenarios (3)
  {
    exercise_type: 'toolkit_practice',
    title: '4-Day Work Week Study',
    content: `"Dr. Elena Rodriguez, Harvard Business School professor, confirms companies implementing 4-day work weeks see 35% productivity increases and 50% lower turnover rates. Her study of 25,000 employees across 75 Fortune 500 companies reveals hidden costs of traditional schedules."`,
    questions: [
      {
        question: "Source Test: What can you verify about Dr. Elena Rodriguez?",
        type: "textarea",
        hint: "Check Harvard faculty directories and recent publications"
      },
      {
        question: "Emotion Test: How does this content make you feel?",
        type: "checkbox",
        options: ["Excited about change", "Skeptical of claims", "Pressure to share", "FOMO about competition"]
      }
    ],
    metadata: { 
      tests: ["source", "emotion", "intention", "coherence", "perspective"],
      difficulty: 2
    }
  },
  {
    exercise_type: 'toolkit_practice',
    title: 'Microsoft AI Manager Replacement',
    content: `"Microsoft insider confirms secret project to replace all middle managers with AI by 2026. 'Project Hierarchy' will eliminate 40,000 positions globally with 60% efficiency improvement."`,
    questions: [
      {
        question: "Source Test: What can you verify about this Microsoft insider?",
        type: "textarea",
        hint: "Look for official statements or credible tech journalism"
      },
      {
        question: "Coherence Test: What seems questionable?",
        type: "checkbox",
        options: ["40,000 is very specific", "No company announces layoffs this way", "60% improvement suspicious", "Timeline unrealistic"]
      }
    ],
    metadata: { 
      tests: ["source", "emotion", "intention", "coherence", "perspective"],
      difficulty: 3
    }
  },
  {
    exercise_type: 'toolkit_practice',
    title: 'AI Productivity Breakthrough',
    content: `"New Stanford research proves AI tools increase knowledge worker productivity by 87%. The landmark study tracked 10,000 professionals using GPT-4 vs traditional methods."`,
    questions: [
      {
        question: "Source Test: Can you verify this Stanford research?",
        type: "textarea",
        hint: "Check Stanford's research database and publication records"
      },
      {
        question: "Intention Test: What is this trying to get you to do?",
        type: "checkbox",
        options: ["Adopt AI tools immediately", "Share with colleagues", "Feel behind if not using AI", "Trust the research authority"]
      }
    ],
    metadata: { 
      tests: ["source", "emotion", "intention", "coherence", "perspective"],
      difficulty: 1
    }
  }
];
```

### **4. Create API Routes**
**Location**: `server/routes/discernment-routes.ts` (NEW file)

```typescript
import { Router } from 'express';
import { requireAuth } from '../middleware/auth';
import { db } from '../db';
import { discernmentScenarios, userDiscernmentProgress } from '../../shared/schema';
import { eq, and, notInArray } from 'drizzle-orm';

const router = Router();

// GET /api/discernment/scenarios/:exerciseType
// Returns user-specific randomized scenario
router.get('/scenarios/:exerciseType', requireAuth, async (req, res) => {
  try {
    const { exerciseType } = req.params;
    const userId = req.user.id;

    // Get user's seen scenarios
    const userProgress = await db.select()
      .from(userDiscernmentProgress)
      .where(eq(userDiscernmentProgress.userId, userId))
      .limit(1);

    const seenScenarios = userProgress[0]?.scenariosSeen || [];

    // Get unseen scenarios of requested type
    const availableScenarios = await db.select()
      .from(discernmentScenarios)
      .where(
        and(
          eq(discernmentScenarios.exerciseType, exerciseType),
          eq(discernmentScenarios.active, true),
          seenScenarios.length > 0 ? notInArray(discernmentScenarios.id, seenScenarios) : undefined
        )
      );

    if (availableScenarios.length === 0) {
      // Reset seen scenarios if all have been viewed
      await db.update(userDiscernmentProgress)
        .set({ scenariosSeen: [] })
        .where(eq(userDiscernmentProgress.userId, userId));

      // Get fresh scenarios
      const freshScenarios = await db.select()
        .from(discernmentScenarios)
        .where(
          and(
            eq(discernmentScenarios.exerciseType, exerciseType),
            eq(discernmentScenarios.active, true)
          )
        );

      if (freshScenarios.length === 0) {
        return res.status(404).json({ error: 'No scenarios available' });
      }

      availableScenarios.push(...freshScenarios);
    }

    // Return random scenario
    const randomScenario = availableScenarios[Math.floor(Math.random() * availableScenarios.length)];
    res.json({ scenario: randomScenario });

  } catch (error) {
    console.error('Error fetching discernment scenario:', error);
    res.status(500).json({ error: 'Failed to fetch scenario' });
  }
});

// POST /api/discernment/progress
// Track user progress
router.post('/progress', requireAuth, async (req, res) => {
  try {
    const { scenarioId } = req.body;
    const userId = req.user.id;

    // Update or create user progress
    const existingProgress = await db.select()
      .from(userDiscernmentProgress)
      .where(eq(userDiscernmentProgress.userId, userId))
      .limit(1);

    if (existingProgress.length > 0) {
      const currentSeen = existingProgress[0].scenariosSeen || [];
      const newSeen = [...currentSeen, scenarioId];

      await db.update(userDiscernmentProgress)
        .set({ 
          scenariosSeen: newSeen,
          lastSessionAt: new Date(),
          totalSessions: existingProgress[0].totalSessions + 1
        })
        .where(eq(userDiscernmentProgress.userId, userId));
    } else {
      await db.insert(userDiscernmentProgress)
        .values({
          userId,
          scenariosSeen: [scenarioId],
          totalSessions: 1
        });
    }

    res.json({ success: true });

  } catch (error) {
    console.error('Error updating discernment progress:', error);
    res.status(500).json({ error: 'Failed to update progress' });
  }
});

export default router;
```

### **5. Register Routes**
**Location**: Add to `server/index.ts` (ADD to existing route registrations)

```typescript
// ADD this import
import discernmentRoutes from './routes/discernment-routes';

// ADD this route registration with existing routes
app.use('/api/discernment', discernmentRoutes);
```

### **6. Create Seeding Script**
**Location**: `server/db/seeds/run-discernment-seed.ts`

```typescript
import { db } from '../index';
import { discernmentScenarios } from '../../../shared/schema';
import { discernmentSeedData } from './discernment-scenarios';

async function seedDiscernmentScenarios() {
  console.log('Seeding discernment scenarios...');
  
  try {
    await db.insert(discernmentScenarios).values(discernmentSeedData);
    console.log('✅ Successfully seeded 9 discernment scenarios');
  } catch (error) {
    console.error('❌ Error seeding discernment scenarios:', error);
  }
}

seedDiscernmentScenarios();
```

## ✅ **SUCCESS CRITERIA**

After implementation:
- [ ] New database tables created (no existing tables modified)
- [ ] 9 scenarios seeded successfully (3 per exercise type)
- [ ] API endpoints respond correctly
- [ ] User progress tracking works
- [ ] No impact on existing AST or IA workshop functionality
- [ ] Ready for Phase 1B React modal integration

## 🧪 **TESTING**

Test the API endpoints:
```bash
# Get reality check scenario
curl -H "Authorization: Bearer <token>" http://localhost:5000/api/discernment/scenarios/reality_check

# Track progress
curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer <token>" \
  -d '{"scenarioId": 1}' http://localhost:5000/api/discernment/progress
```

**Ready to implement Phase 1A!**