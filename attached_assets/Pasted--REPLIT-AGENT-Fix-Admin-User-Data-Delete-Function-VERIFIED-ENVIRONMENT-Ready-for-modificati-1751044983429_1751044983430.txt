# REPLIT AGENT: Fix Admin User Data Delete Function

## ‚úÖ VERIFIED ENVIRONMENT: Ready for modifications

## üéØ PROBLEM IDENTIFIED
The admin user data delete function is trying to delete from tables that **don't exist**, causing incomplete data deletion.

## üîç CURRENT ISSUE IN CODE

**File**: `/server/services/user-management-service.ts`  
**Method**: `deleteUserData(userId: number)`  
**Lines**: ~410-450

### **‚ùå CURRENT CODE PROBLEMS:**
```typescript
// These tables DON'T EXIST in schema.ts:
await db.execute(sql`DELETE FROM star_cards WHERE user_id = ${userId}`);
await db.execute(sql`DELETE FROM flow_attributes WHERE user_id = ${userId}`);
```

### **‚úÖ ACTUAL DATA STORAGE LOCATIONS:**
Based on analysis of `/shared/schema.ts` and `/server/routes/workshop-data-routes.ts`:

**Star card and flow data is stored in `user_assessments` table as JSON:**
- **Star card**: `assessmentType = 'starCard'`, results contains `{thinking, feeling, acting, planning}`
- **Flow attributes**: `assessmentType = 'flowAttributes'`, results contains `{attributes: [], flowScore: number}`
- **All reflections**: Various assessmentType values like `'roundingOutReflection'`, `'finalReflection'`, etc.

## üîß EXACT CHANGES REQUIRED

### **File to Modify**: `server/services/user-management-service.ts`

**Replace the entire `deleteUserData` method with:**

```typescript
async deleteUserData(userId: number) {
  try {
    console.log(`Starting complete data deletion for user ${userId}`);
    
    const { sql } = await import('drizzle-orm');
    
    let deletedData = {
      userAssessments: 0,
      navigationProgressTable: 0,
      navigationProgressField: false,
      workshopParticipation: 0,
      growthPlans: 0,
      finalReflections: 0,
      discernmentProgress: 0
    };

    // 1. Delete ALL user assessments (includes star cards, flow data, reflections, etc.)
    try {
      const assessmentResult = await db.execute(sql`DELETE FROM user_assessments WHERE user_id = ${userId}`);
      deletedData.userAssessments = assessmentResult.rowCount || 0;
      console.log(`Deleted ${deletedData.userAssessments} assessment records for user ${userId}`);
    } catch (error) {
      console.log(`No user assessments found for user ${userId}:`, error.message);
    }

    // 2. Delete navigation progress from dedicated table
    try {
      const navResult = await db.execute(sql`DELETE FROM navigation_progress WHERE user_id = ${userId}`);
      deletedData.navigationProgressTable = navResult.rowCount || 0;
      console.log(`Deleted ${deletedData.navigationProgressTable} navigation progress records for user ${userId}`);
    } catch (error) {
      console.log(`No navigation progress found for user ${userId}:`, error.message);
    }

    // 3. Clear navigation progress field in users table
    try {
      await db.execute(sql`UPDATE users SET navigation_progress = NULL WHERE id = ${userId}`);
      deletedData.navigationProgressField = true;
      console.log(`Cleared navigation_progress field in users table for user ${userId}`);
    } catch (error) {
      console.log(`Error clearing navigation_progress field for user ${userId}:`, error.message);
    }

    // 4. Delete workshop participation data
    try {
      const workshopResult = await db.execute(sql`DELETE FROM workshop_participation WHERE user_id = ${userId}`);
      deletedData.workshopParticipation = workshopResult.rowCount || 0;
      console.log(`Deleted ${deletedData.workshopParticipation} workshop participation records for user ${userId}`);
    } catch (error) {
      console.log(`No workshop participation found for user ${userId}`);
    }

    // 5. Delete growth plans
    try {
      const growthResult = await db.execute(sql`DELETE FROM growth_plans WHERE user_id = ${userId}`);
      deletedData.growthPlans = growthResult.rowCount || 0;
      console.log(`Deleted ${deletedData.growthPlans} growth plan records for user ${userId}`);
    } catch (error) {
      console.log(`No growth plans found for user ${userId}`);
    }

    // 6. Delete final reflections
    try {
      const reflectionResult = await db.execute(sql`DELETE FROM final_reflections WHERE user_id = ${userId}`);
      deletedData.finalReflections = reflectionResult.rowCount || 0;
      console.log(`Deleted ${deletedData.finalReflections} final reflection records for user ${userId}`);
    } catch (error) {
      console.log(`No final reflections found for user ${userId}`);
    }

    // 7. Delete discernment progress
    try {
      const discernmentResult = await db.execute(sql`DELETE FROM user_discernment_progress WHERE user_id = ${userId}`);
      deletedData.discernmentProgress = discernmentResult.rowCount || 0;
      console.log(`Deleted ${deletedData.discernmentProgress} discernment progress records for user ${userId}`);
    } catch (error) {
      console.log(`No discernment progress found for user ${userId}`);
    }

    const totalRecordsDeleted = Object.values(deletedData).reduce((total, value) => {
      return typeof value === 'number' ? total + value : total;
    }, 0);

    console.log(`Completed data deletion for user ${userId}:`, deletedData);

    return {
      success: true,
      message: 'User data deleted successfully',
      deletedData,
      summary: `Deleted ${totalRecordsDeleted} total records across ${Object.keys(deletedData).length} data categories`
    };
  } catch (error) {
    console.error('Error deleting user data:', error);
    return {
      success: false,
      error: 'Failed to delete user data: ' + (error instanceof Error ? error.message : 'Unknown error')
    };
  }
}
```

## ‚úÖ VERIFICATION TABLES

**Tables that EXIST in schema.ts (delete from these):**
- ‚úÖ `user_assessments` - Contains star cards, flow data, all reflections as JSON
- ‚úÖ `navigation_progress` - Dedicated navigation progress table  
- ‚úÖ `users.navigation_progress` - Field in users table to clear
- ‚úÖ `workshop_participation` - Workshop participation data
- ‚úÖ `growth_plans` - Growth plan data
- ‚úÖ `final_reflections` - Final reflection data
- ‚úÖ `user_discernment_progress` - Discernment progress data

**Tables that DON'T EXIST (remove references to these):**
- ‚ùå `star_cards` - Star card data is in user_assessments as assessmentType='starCard'
- ‚ùå `flow_attributes` - Flow data is in user_assessments as assessmentType='flowAttributes'

## üéØ CRITICAL CONSTRAINTS

- ‚ùå **DO NOT modify any other files** - only fix the deleteUserData method
- ‚ùå **DO NOT modify frontend components** - this is backend-only fix
- ‚ùå **DO NOT change database schema** - work with existing tables only
- ‚úÖ **ONLY update the deleteUserData method** in user-management-service.ts
- ‚úÖ **Preserve all existing functionality** in the service
- ‚úÖ **Improve error handling** and logging for better debugging

## üß™ TESTING REQUIREMENTS

After implementation:
1. **Test admin delete user data** function in admin panel
2. **Verify all assessment data removed** from user_assessments table
3. **Check navigation progress cleared** from both table and field
4. **Confirm frontend shows clean state** after data deletion
5. **Test with actual user data** to ensure complete cleanup

## ‚úÖ SUCCESS CRITERIA

- **deleteUserData method** targets only existing tables
- **All user assessment data** deleted (star cards, flow, reflections, etc.)
- **Navigation progress** cleared from both locations
- **Error handling improved** with proper try/catch blocks
- **Detailed logging** shows exactly what was deleted
- **Return object** includes comprehensive deletion summary

IMPLEMENT THIS FIX TO RESOLVE INCOMPLETE USER DATA DELETION.