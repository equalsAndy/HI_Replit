# AllStarTeams App Progression Logic - Updated for Real Implementation

## IMPORTANT: Scope Limitations
**ONLY implement the progression logic specified in this prompt. Do NOT:**
- Add additional features not mentioned here
- Create new UI components beyond what's described
- Modify existing functionality that isn't part of the progression system
- Add extra validation, warnings, or helper features
- Implement functionality that "seems helpful" but isn't specified
- Change the existing design system, styling, or layout
- Add additional database fields beyond those listed
- Create new user flows or shortcuts not described

**STICK STRICTLY to the progression rules, completion criteria, and data persistence requirements outlined below.**

## Overview
You are implementing a sequential learning progression system for the AllStarTeams workshop app. Users must complete learning steps (step IDs 1-1, then 2-1 through 4-5) in order, with each completion unlocking the next step. Step 4-5 (Final Reflection) is the final learning step, which unlocks all content items in sections 5 and 6. The app contains 6 main sections (Introduction, Discover Your Star Strengths, Identify Your Flow, Visualize Future Growth, NEXT STEPS, MORE INFORMATION). All progress persists across browser sessions and logins via existing Phase 1 auto-save system.

## Integration with Existing Phase 1 Implementation

### Auto-Save System Already Implemented (DO NOT CHANGE)
- ✅ **Text inputs auto-save** after 1 second of no typing (Phase 1B)
- ✅ **Assessment selections save immediately** when user makes choices (Phase 1C)
- ✅ **All data persists** via `userAssessments` table with JSON `results` field
- ✅ **Navigation progress** stored in `users.navigationProgress` JSON field
- ✅ **Admin reset functionality** implemented (Phase 1D)
- ✅ **Error handling with local storage backup** for failed saves

### Progression Logic Integration
- **Data Saving**: Use existing auto-save - DO NOT implement additional save triggers
- **Completion Detection**: Check if required data exists in database to determine completion
- **Progress Tracking**: Update `users.navigationProgress` JSON field with completion states
- **Unlock Logic**: Enable next steps based on completion detection, not manual saves

## Database Schema (Existing - DO NOT MODIFY)

### Assessment Types (Match Phase 1 Implementation):
- Step 2-2: `assessmentType = 'starCard'` → `{ thinking, acting, feeling, planning, imageUrl? }`
- Step 2-4: `assessmentType = 'stepByStepReflection'` → `{ strength1, strength2, strength3, strength4, teamValues, uniqueContribution }`
- Step 3-2: `assessmentType = 'flowAssessment'` → `{ flowScore, answers, totalQuestions, maxScore }`
- Step 3-3: `assessmentType = 'roundingOutReflection'` → `{ strengths, values, passions, growthAreas }`
- Step 3-4: `assessmentType = 'flowAttributes'` → `{ attributes: [4 strings], flowScore }`
- Step 4-1: `assessmentType = 'cantrilLadder'` → `{ currentRating, futureRating }`
- Step 4-2: `assessmentType = 'cantrilLadderReflection'` → `{ currentFactors, futureImprovements, specificChanges, quarterlyProgress, quarterlyActions }`
- Step 4-3: `assessmentType = 'visualizingPotential'` → `{ selectedImages, imageMeaning }`
- Step 4-4: `assessmentType = 'futureSelfReflection'` → `{ futureSelfDescription, visualizationNotes, additionalNotes }`
- Step 4-5: `assessmentType = 'finalReflection'` → `{ keyInsights, actionSteps, commitments }`

### Navigation Progress Structure (Existing):
```javascript
users.navigationProgress = {
  completedSteps: ["1-1", "2-1", "2-2"], // Array of completed step IDs
  currentStepId: "2-3",                   // Current active step
  appType: "ast",                         // Workshop type
  lastVisitedAt: "2025-06-04T...",       // Last access timestamp
  unlockedSections: ["1", "2"],          // Unlocked section numbers
  videoProgress: {                        // Video watch percentages
    "1-1": 100.0,
    "2-1": 85.3
  }
}
```

## Core Progression Rules

### Initial State
- On first login: Only "Introduction Video" (1-1) is active, all other sections disabled
- Progress indicators show real-time completion status:
  - "0/4" = no steps completed in that section
  - "1/4" = one step completed out of four total
  - "2/4" = two steps completed out of four total
  - "4/4" = all steps completed in that section
- Completed sections display green checkmarks and remain accessible for revisiting

### Video Content Pattern
- **ALL videos auto-play** on section entry
- Minimum 1% watch time required before "Next" button enables
- Store video progress in `navigationProgress.videoProgress[stepId]`
- "Next" button OR video completion (100%) triggers progression
- Pattern: Auto-play video + ≥1% + "Next: [Next Section]" → unlock next section

### Assessment Modal Pattern
- Modal assessments collect data through all questions
- **Data auto-saves immediately** as user makes selections (Phase 1C - already implemented)
- Completion shows results screen with "Next: [Next Section]" button
- Results + progression button updates navigation progress and unlocks next step
- Revisiting completed assessments shows results in content view (not assessment modal)

### Reflection Pattern
- Reflection sections have multiple text input questions
- **Text auto-saves after 1 second** of no typing (Phase 1B - already implemented)
- ALL questions must have non-empty responses for completion
- Check database for complete data to determine if step is complete
- Completion unlocks next section and updates navigation progress

## Activity Type Icons (Existing - DO NOT CHANGE)
The app uses existing SVG icons to indicate activity types:
- **Book Icon**: Video content or content with activities
- **Lightning Icon**: Assessments or interactive activities  
- **Pencil Icon**: Reflection/writing activities

## Section Progress Indicators

### Dynamic Progress Display
Each section must show real-time completion progress:

**Introduction Section (1/1):**
- 0/1 → Introduction video not started
- 1/1 → Introduction video completed (≥1% watched)

**Discover Your Star Strengths (4/4):**
- 0/4 → No steps completed
- 1/4 → Intro to Star Strengths completed
- 2/4 → Intro + Star Assessment completed
- 3/4 → Intro + Assessment + Star Card Preview completed
- 4/4 → All steps completed (section shows green checkmark)

**Identify Your Flow (4/4):**
- 0/4 → No steps completed
- 1/4 → Intro to Flow completed
- 2/4 → Intro + Flow Assessment completed
- 3/4 → Intro + Assessment + Rounding Out completed
- 4/4 → All steps completed (section shows green checkmark)

**Visualize Your Potential (5/5):**
- 0/5 → No steps completed
- 1/5 → Ladder of Well-being completed
- 2/5 → Ladder + Well-being Reflections completed
- 3/5 → Ladder + Reflections + Visualizing You completed
- 4/5 → Ladder + Reflections + Visualizing + Future Self completed
- 5/5 → All steps completed (section shows green checkmark)

### Progress Counter Updates
- Progress indicators must update **immediately** when step completion is detected
- Use completion detection logic to count completed steps in each section
- Show current completion count / total steps in section
- Only show green checkmark when section fully complete (X/X)

### AllStarTeams Introduction (1/1)
**Step 1-1: Introduction Video** (Book Icon)
- **Auto-play** on first login
- ≥1% watch required before "Next: Intro to Star Strengths" enables
- Store progress in `videoProgress["1-1"]`
- Completion → green checkmark + unlock "Intro to Star Strengths" (2-1)

### Discover your Star Strengths (4/4)
Sequential unlock: Intro → Assessment → Preview → Reflect

1. **Step 2-1: Intro to Star Strengths** (Book Icon)
   - **Auto-play** video + ≥1% + "Next: Star Strengths Self-Assessment"
   - Store progress in `videoProgress["2-1"]`

2. **Step 2-2: Star Strengths Self-Assessment** (Lightning Icon)
   - Modal assessment → all questions → results screen
   - **Data auto-saves immediately** via Phase 1C implementation
   - Check for `starCard` assessment with valid percentages (sum = 100)
   - "Next: Review Your Star Card" button updates navigation progress
   - Revisiting shows results in content view

3. **Step 2-3: Review Your Star Card** (Book Icon)
   - Displays generated star card from assessment data
   - **Auto-play** video + ≥1% + "Next: Strength Reflection"
   - Store progress in `videoProgress["2-3"]`

4. **Step 2-4: Strength Reflection** (Pencil Icon)
   - 6 reflection questions (strength1-4, teamValues, uniqueContribution)
   - **Text auto-saves after 1 second** via Phase 1B implementation
   - Check for `stepByStepReflection` with all 6 fields non-empty
   - Completion → green checkmark + unlock "Intro to Flow" (3-1)

### Identify Your Flow (4/4)
Sequential unlock: Intro → Assessment → Rounding → Add Flow

1. **Step 3-1: Intro to Flow** (Book Icon)
   - **Auto-play** video + ≥1% + "Next: Flow Assessment"
   - Store progress in `videoProgress["3-1"]`

2. **Step 3-2: Flow Assessment** (Lightning Icon)
   - Modal assessment → all questions → results + auto-save via Phase 1C
   - Check for `flowAssessment` with complete answers object
   - "Next: Rounding Out" enables progression

3. **Step 3-3: Rounding Out** (Book Icon)
   - **Auto-play** video + ≥1% + 4 reflection inputs
   - **Text auto-saves** via Phase 1B implementation
   - Check for `roundingOutReflection` with all 4 fields (strengths, values, passions, growthAreas) non-empty
   - "Next: Add Flow to Star Card" enables

4. **Step 3-4: Add Flow to Star Card** (Lightning Icon)
   - Word picker: select exactly 4 words
   - **Data auto-saves immediately** via Phase 1C when selections made
   - Check for `flowAttributes` with exactly 4 attribute strings
   - "Add Attributes to Star Card" → picker disappears + button disables
   - "Next" button enables → unlock "Ladder of Well-being" (4-1)
   - Edit mode: re-enable picker → select 4 → "Add to Card Again" → return to disabled mode

### Visualize your Potential (5/5)
Sequential unlock: Ladder → Reflections → Visualizing → Future Self → Final

1. **Step 4-1: Ladder of Well-being** (Book Icon)
   - **Auto-play** video + ≥1% + Cantril Ladder activity (2 sliders)
   - **Slider values auto-save immediately** via Phase 1C
   - Check for `cantrilLadder` with currentRating and futureRating
   - "I'm Done" button enables next step

2. **Step 4-2: Well-being Reflections** (Book Icon)
   - Display ladder graphic from previous section choices
   - 5 reflection questions (currentFactors, futureImprovements, specificChanges, quarterlyProgress, quarterlyActions)
   - **Text auto-saves** via Phase 1B implementation
   - Check for `cantrilLadderReflection` with all 5 fields non-empty
   - ALL questions answered → unlock next

3. **Step 4-3: Visualizing You** (Book Icon)
   - Vision board/image selection activity (built)
   - **Data auto-saves** when images selected and meaning entered
   - Check for `visualizingPotential` with selectedImages and imageMeaning
   - Completion unlocks next

4. **Step 4-4: Your Future Self** (Pencil Icon)
   - **Auto-play** video + ≥1% + reflection questions
   - **Text auto-saves** via Phase 1B implementation
   - Check for `futureSelfReflection` with required fields non-empty
   - ALL questions answered → unlock next

5. **Step 4-5: Final Reflection** (Pencil Icon)
   - One final question with multiple parts
   - **Text auto-saves** via Phase 1B implementation
   - Check for `finalReflection` with keyInsights, actionSteps, commitments non-empty
   - Answer → unlock "Resources" sections (5 and 6)

### Resources (Unlocked after Final Reflection)
- **Workshop Guide**: Reference material (accessible anytime)
- **Your Star Report**: AI-generated PDF (Phase 2 feature - placeholder implementation)
- **Your Star Card**: Final compiled version, downloadable only from here

## Completion Detection Logic

### Text Input Completion:
```javascript
// Check if reflection is complete
const isReflectionComplete = (assessmentType, requiredFields) => {
  const assessment = userAssessments.find(a => a.assessmentType === assessmentType);
  if (!assessment) return false;
  
  const data = JSON.parse(assessment.results);
  return requiredFields.every(field => data[field] && data[field].trim().length > 0);
};
```

### Assessment Completion:
```javascript
// Check if assessment is complete
const isAssessmentComplete = (assessmentType, validationFn) => {
  const assessment = userAssessments.find(a => a.assessmentType === assessmentType);
  if (!assessment) return false;
  
  const data = JSON.parse(assessment.results);
  return validationFn(data);
};
```

### Video Completion:
```javascript
// Check if video has minimum watch time
const isVideoComplete = (stepId, minPercentage = 1) => {
  const progress = navigationProgress?.videoProgress?.[stepId] || 0;
  return progress >= minPercentage;
};
```

## Navigation Progress Updates

### Update Progress Function:
```javascript
const updateNavigationProgress = (stepId, completed = true) => {
  const currentProgress = user.navigationProgress ? JSON.parse(user.navigationProgress) : {
    completedSteps: [],
    currentStepId: null,
    appType: "ast",
    lastVisitedAt: new Date().toISOString(),
    unlockedSections: [],
    videoProgress: {}
  };
  
  if (completed && !currentProgress.completedSteps.includes(stepId)) {
    currentProgress.completedSteps.push(stepId);
  }
  
  currentProgress.currentStepId = getNextStepId(stepId);
  currentProgress.lastVisitedAt = new Date().toISOString();
  
  // Update unlocked sections based on completed steps
  updateUnlockedSections(currentProgress);
  
  // Save back to database
  await db.update(users)
    .set({ navigationProgress: JSON.stringify(currentProgress) })
    .where(eq(users.id, userId));
};
```

## Error Handling (Build on Phase 1D)
- If user attempts to access locked section → redirect to current unlocked section
- If required data missing → prevent progression until completed
- Use existing Phase 1D error handling for database operations
- Leverage existing local storage backup system for progress updates

## Special Behaviors
- Modal assessments: First visit = assessment, return visits = results view
- Word picker: Disabled state with edit option after initial completion
- Videos: Auto-play on section entry, progress tracked in navigationProgress
### Progress Counter Calculation
```javascript
// Calculate section progress based on completed steps
const getSectionProgress = (sectionSteps, completedSteps) => {
  const completedInSection = sectionSteps.filter(stepId => 
    completedSteps.includes(stepId)
  ).length;
  
  return {
    completed: completedInSection,
    total: sectionSteps.length,
    display: `${completedInSection}/${sectionSteps.length}`,
    isComplete: completedInSection === sectionSteps.length
  };
};

// Section step mappings
const SECTION_STEPS = {
  introduction: ["1-1"],
  starStrengths: ["2-1", "2-2", "2-3", "2-4"], 
  flow: ["3-1", "3-2", "3-3", "3-4"],
  potential: ["4-1", "4-2", "4-3", "4-4", "4-5"]
};

// Example usage
const completedSteps = ["1-1", "2-1", "2-2"]; // From navigationProgress
const flowProgress = getSectionProgress(SECTION_STEPS.flow, completedSteps);
// Returns: { completed: 0, total: 4, display: "0/4", isComplete: false }

const starProgress = getSectionProgress(SECTION_STEPS.starStrengths, completedSteps);  
// Returns: { completed: 2, total: 4, display: "2/4", isComplete: false }
```
- **All data persistence handled by existing Phase 1 auto-save system**

## UI Navigation Requirements

### Menu Item Names and Navigation (Use Exact Names)
- Step 1-1: "Introduction"
- Step 2-1: "Intro to Star Strengths"
- Step 2-2: "Star Strengths Self-Assessment"
- Step 2-3: "Review Your Star Card"
- Step 2-4: "Strength Reflection"
- Step 3-1: "Intro to Flow"
- Step 3-2: "Flow Assessment"
- Step 3-3: "Rounding Out"
- Step 3-4: "Add Flow to Star Card"
- Step 4-1: "Ladder of Well-being"
- Step 4-2: "Well-being Reflections"
- Step 4-3: "Visualizing You"
- Step 4-4: "Your Future Self"
- Step 4-5: "Final Reflection"

### Button Format:
- **All "Next" buttons must use exact menu item names**
- Format: "Next: [Exact Menu Item Name]"
- Must navigate directly to that specific step ID

## Export Compatibility (Phase 2)
- Progression data must be compatible with Admin User Data Export
- All completion states included in export JSON structure
- Progress tracking supports analytics and reporting
- navigationProgress field exports in complete format

## Testing URLs (Port 5000)
- Development: `http://localhost:5000`
- Health check: `http://localhost:5000/api/health`
- Navigation progress API: `http://localhost:5000/api/user/navigation-progress`

## Final Reminder: Build on Existing Phase 1
**DO NOT implement new data saving logic. Use the existing Phase 1 auto-save system and focus ONLY on:**
1. **Completion detection** based on existing database data
2. **Navigation progress updates** in users.navigationProgress field
3. **Step unlocking logic** based on completion states
4. **UI progression controls** (Next buttons, section enabling/disabling)

**Implement ONLY the progression system features specified above. Do not add additional functionality beyond what's described.**