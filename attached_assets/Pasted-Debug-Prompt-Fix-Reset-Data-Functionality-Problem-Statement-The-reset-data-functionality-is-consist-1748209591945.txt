Debug Prompt: Fix Reset Data Functionality
Problem Statement
The reset data functionality is consistently failing when triggered from the workshop reset page (/workshop-reset), despite having a comprehensive backend system in place. The system should completely clear user assessment data and progress but is not working reliably.
System Architecture Overview
Backend Components:

Database: Users, userAssessments, workshopParticipation tables
Service: server/services/reset-service.ts with ResetService class
Routes: server/routes/reset-routes.ts with POST endpoints
Target Endpoint: POST /api/reset/user/:userId

Frontend Components:

Workshop Reset Page: client/src/pages/workshop-reset.tsx
Reset Button: client/src/components/profile/ResetDataButton.tsx
Test Banner: client/src/components/test-users/TestUserBanner.tsx

Target SQL Operations
The reset should execute these specific SQL statements:
sqlDELETE FROM user_assessments WHERE user_id = ${userId}
DELETE FROM workshop_participation WHERE user_id = ${userId}
Systematic Debugging Approach
STEP 1: Verify API Route Registration
Check: Ensure reset routes are properly registered in your main server file
javascript// Look for this in your main server.js/app.js file
app.use('/api/reset', resetRoutes);
Action: If missing, add the route registration before server starts
STEP 2: Test API Endpoint Directly
Action: Use the Replit console or a tool like curl to test the endpoint directly:
bashcurl -X POST http://localhost:3000/api/reset/user/[USER_ID] \
  -H "Content-Type: application/json" \
  -H "Cookie: userId=[USER_ID]"
Expected Response: Success message with confirmation of deleted records
If it fails here: The issue is in your backend service/routes
STEP 3: Verify Database Connection and Schema
Check: Confirm your database tables exist and have the correct structure:
sql-- Run these queries to verify table structure
DESCRIBE user_assessments;
DESCRIBE workshop_participation;

-- Check if data exists before reset
SELECT COUNT(*) FROM user_assessments WHERE user_id = [TEST_USER_ID];
SELECT COUNT(*) FROM workshop_participation WHERE user_id = [TEST_USER_ID];
STEP 4: Debug the ResetService Class
Check: In server/services/reset-service.ts, add console logging:
javascriptasync resetAllUserData(userId: number) {
  console.log(`Starting reset for user ${userId}`);
  
  try {
    // Log before each DELETE operation
    console.log('Deleting user_assessments...');
    const result1 = await db.execute(`DELETE FROM user_assessments WHERE user_id = ${userId}`);
    console.log('user_assessments deleted:', result1);
    
    console.log('Deleting workshop_participation...');
    const result2 = await db.execute(`DELETE FROM workshop_participation WHERE user_id = ${userId}`);
    console.log('workshop_participation deleted:', result2);
    
    console.log(`Reset completed for user ${userId}`);
    return { success: true, deletedAssessments: result1.affectedRows, deletedParticipation: result2.affectedRows };
  } catch (error) {
    console.error('Reset failed:', error);
    throw error;
  }
}
STEP 5: Check Frontend Request Execution
Debug: In your workshop reset page, add detailed logging:
javascript// In workshop-reset.tsx or ResetDataButton.tsx
const handleReset = async () => {
  try {
    console.log('Initiating reset for user:', userId);
    
    const response = await fetch(`/api/reset/user/${userId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include' // Important for cookies
    });
    
    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);
    
    const data = await response.json();
    console.log('Response data:', data);
    
    if (!response.ok) {
      throw new Error(`Reset failed: ${data.message || response.statusText}`);
    }
    
    console.log('Reset successful:', data);
  } catch (error) {
    console.error('Reset error:', error);
  }
};
STEP 6: Verify Authentication and Permissions
Check: Ensure the user ID cookie is being sent correctly:
javascript// In your reset route handler
app.post('/api/reset/user/:userId', (req, res) => {
  console.log('Cookies received:', req.cookies);
  console.log('User ID from params:', req.params.userId);
  console.log('User ID from cookie:', req.cookies.userId);
  
  // Verify authentication
  if (!req.cookies.userId) {
    return res.status(401).json({ error: 'Not authenticated' });
  }
  
  // Continue with reset logic...
});
STEP 7: Database Connection and Transaction Issues
Check: Ensure your database queries are using proper error handling:
javascript// Add transaction support to ensure both deletes succeed or fail together
async resetAllUserData(userId: number) {
  const connection = await db.getConnection();
  await connection.beginTransaction();
  
  try {
    await connection.execute(`DELETE FROM user_assessments WHERE user_id = ?`, [userId]);
    await connection.execute(`DELETE FROM workshop_participation WHERE user_id = ?`, [userId]);
    
    await connection.commit();
    console.log(`Successfully reset data for user ${userId}`);
  } catch (error) {
    await connection.rollback();
    console.error('Transaction failed, rolled back:', error);
    throw error;
  } finally {
    connection.release();
  }
}
Common Failure Points to Check

Route Not Found (404): Reset routes not registered in main server
Authentication Issues: userId cookie not being sent or validated
Database Connection: Connection pool exhausted or database offline
SQL Syntax Errors: Parameterized queries vs string interpolation
Transaction Failures: One delete succeeds but the other fails
Frontend Network Issues: CORS, fetch configuration, or proxy problems

Verification Steps
After implementing fixes:

Check Database: Verify data is actually deleted

sqlSELECT COUNT(*) FROM user_assessments WHERE user_id = [TEST_USER_ID];
SELECT COUNT(*) FROM workshop_participation WHERE user_id = [TEST_USER_ID];

Test Frontend Flow: Ensure UI reflects the reset (forms clear, progress resets)
Test Error Scenarios: What happens with invalid user IDs, missing authentication, etc.

Quick Diagnostic Commands
Run these in your Replit console to quickly identify issues:
bash# Check if server is running and routes are accessible
curl -I http://localhost:3000/api/reset/user/1

# Check server logs for errors
tail -f logs/server.log

# Test database connectivity
# (replace with your database testing command)
Expected Behavior After Fix

✅ API endpoint responds with 200 status
✅ Database records are deleted (verified by count queries)
✅ Frontend UI updates to reflect cleared state
✅ Console logs show successful execution
✅ No error messages in browser or server logs

Focus on testing each layer independently (API → Service → Database) to isolate where the failure occurs.