# Phase 1A: Foundation & API Endpoints Implementation

## ðŸŽ¯ IMMEDIATE GOAL
Create missing API endpoints for all 7 assessment types with basic save/load functionality. Test manually before proceeding to auto-save.

## ðŸš¨ CRITICAL RULES
- **DO NOT MODIFY** existing UI components, interfaces, or user interactions
- **ONLY ADD** server-side persistence functionality
- **USE EXISTING** patterns from current endpoints

## Missing Endpoints to Create

Based on the existing codebase pattern, create these 4 missing endpoint pairs:

### 1. Rounding Out Reflection
```
POST /api/workshop-data/rounding-out
GET /api/workshop-data/rounding-out
```

### 2. Future Self Reflection  
```
POST /api/workshop-data/future-self
GET /api/workshop-data/future-self
```

### 3. Cantril Ladder Assessment
```
POST /api/workshop-data/cantril-ladder
GET /api/workshop-data/cantril-ladder
```

### 4. Final Insights Reflection
```
POST /api/workshop-data/final-insights  
GET /api/workshop-data/final-insights
```

## Data Schemas for Each Endpoint

### Rounding Out (`assessmentType = 'roundingOutReflection'`)
```javascript
// POST Body & GET Response
{
  strengths: string (required, 1-1000 chars),
  values: string (required, 1-1000 chars), 
  passions: string (required, 1-1000 chars),
  growthAreas: string (required, 1-1000 chars)
}
```

### Future Self (`assessmentType = 'futureSelfReflection'`)
```javascript
// POST Body & GET Response
{
  futureSelfDescription: string (required, 1-1000 chars),
  visualizationNotes: string (optional, 1-1000 chars)
}
```

### Cantril Ladder (`assessmentType = 'cantrilLadder'`)
```javascript
// POST Body & GET Response
{
  currentWellbeing: number (required, integer 0-10),
  futureWellbeing: number (required, integer 0-10),
  pastWellbeing: number (optional, integer 0-10)
}
```

### Final Insights (`assessmentType = 'finalReflection'`)
```javascript
// POST Body & GET Response
{
  keyInsights: string (required, 1-1000 chars),
  actionSteps: string (required, 1-1000 chars),
  commitments: string (required, 1-1000 chars)
}
```

## Server-Side Validation Rules

### Text Field Validation:
```javascript
// For all string fields
- Required: true (unless marked optional)
- Length: 1-1000 characters
- Sanitization: Strip HTML tags
- Trim whitespace
```

### Number Field Validation:
```javascript
// For Cantril Ladder scores
- Type: Integer only
- Range: 0-10 inclusive
- Required: currentWellbeing, futureWellbeing  
- Optional: pastWellbeing
```

## Response Format

Use this consistent format for all endpoints:

### Success Response:
```javascript
{
  success: true,
  data: { ...assessmentData },
  meta: { 
    saved_at: "2025-06-03T10:30:00Z",
    assessmentType: "roundingOutReflection" 
  }
}
```

### Error Response:
```javascript
{
  success: false,
  error: "Validation error message",
  code: "VALIDATION_ERROR",
  details: { fieldName: "Specific field error" }
}
```

## Implementation Pattern

Follow the existing pattern from current endpoints in `server/routes/workshop-data-routes.ts`:

### POST Endpoint Pattern:
```javascript
app.post('/api/workshop-data/[endpoint-name]', requireAuth, async (req, res) => {
  try {
    const userId = req.user.id; // Get from auth
    const assessmentData = req.body;
    
    // Validate data here
    
    // Save to userAssessments table
    const result = await saveAssessment(userId, 'assessmentType', assessmentData);
    
    res.json({
      success: true,
      data: result,
      meta: { saved_at: new Date().toISOString(), assessmentType: 'assessmentType' }
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      error: error.message,
      code: 'SAVE_ERROR'
    });
  }
});
```

### GET Endpoint Pattern:
```javascript
app.get('/api/workshop-data/[endpoint-name]', requireAuth, async (req, res) => {
  try {
    const userId = req.user.id;
    
    const assessment = await getAssessment(userId, 'assessmentType');
    
    if (!assessment) {
      return res.json({ success: true, data: null });
    }
    
    res.json({
      success: true,
      data: assessment.results,
      meta: { assessmentType: 'assessmentType' }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve assessment',
      code: 'FETCH_ERROR'
    });
  }
});
```

## Database Operations

Use existing userAssessments table with these assessmentType values:

- `'roundingOutReflection'`
- `'futureSelfReflection'` 
- `'cantrilLadder'`
- `'finalReflection'`

## Manual Testing

After implementation, test each endpoint:

### Test POST Endpoints:
```bash
# Rounding Out
curl -X POST /api/workshop-data/rounding-out \
  -H "Content-Type: application/json" \
  -d '{"strengths":"test strength","values":"test values","passions":"test passions","growthAreas":"test growth"}'

# Future Self  
curl -X POST /api/workshop-data/future-self \
  -H "Content-Type: application/json" \
  -d '{"futureSelfDescription":"test future self","visualizationNotes":"test notes"}'

# Cantril Ladder
curl -X POST /api/workshop-data/cantril-ladder \
  -H "Content-Type: application/json" \
  -d '{"currentWellbeing":7,"futureWellbeing":9,"pastWellbeing":5}'

# Final Insights
curl -X POST /api/workshop-data/final-insights \
  -H "Content-Type: application/json" \
  -d '{"keyInsights":"test insights","actionSteps":"test steps","commitments":"test commitments"}'
```

### Test GET Endpoints:
```bash
curl -X GET /api/workshop-data/rounding-out
curl -X GET /api/workshop-data/future-self
curl -X GET /api/workshop-data/cantril-ladder  
curl -X GET /api/workshop-data/final-insights
```

## Success Criteria for Phase 1A

âœ… All 4 new endpoints created and working  
âœ… Data saves to userAssessments table correctly  
âœ… Data retrieves with proper format  
âœ… Validation works (test with invalid data)  
âœ… Existing endpoints still work unchanged  
âœ… No UI changes made  

## Files to Modify

**Primary:**
- `server/routes/workshop-data-routes.ts` - Add the 4 new endpoint pairs

**Possibly:**
- `server/services/workshop-data-service.ts` - If save/get functions need updates
- `shared/types.ts` - If type definitions need new assessment types

**DO NOT MODIFY:**
- Any client-side components
- Any UI files
- Existing endpoint functionality

## Ready to Implement

Claude, please implement Phase 1A following this exact specification. Focus on getting the basic save/load working correctly before any advanced features.

Report back when all 4 endpoint pairs are working and you've tested them manually.