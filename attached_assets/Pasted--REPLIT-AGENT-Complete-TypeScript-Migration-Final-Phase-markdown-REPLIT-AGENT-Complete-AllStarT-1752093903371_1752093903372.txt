 REPLIT AGENT: Complete TypeScript Migration - Final Phase
markdown# REPLIT AGENT: Complete AllStarTeams TypeScript Migration to Production

## üéØ **Mission:** 
Complete the migration of the entire AllStarTeams application to AWS by fixing ALL TypeScript errors and creating a production-ready server with full functionality.

## üìä **Current Status:**
- ‚úÖ Basic production server working (auth + sessions)
- ‚úÖ Container deployment infrastructure complete
- ‚ùå 200+ TypeScript errors blocking full application migration
- ‚ùå Missing workshop routes, admin system, assessments, reports

## üîß **Comprehensive Fix Strategy:**

### **Phase 1: Fix All Import Paths (Critical)**
Systematically convert ALL TypeScript imports to container-compatible format:
```typescript
// Pattern to apply across ALL server files:
import { User } from "../shared/types"; ‚Üí import { User } from "../shared/types.js";
import { db } from "./db"; ‚Üí import { db } from "./db.js";
import schema from "../shared/schema"; ‚Üí import schema from "../shared/schema.js";
Target Files: ALL files in server/ directory (25+ files)
Phase 2: Fix Schema Type Mismatches
Resolve database schema inconsistencies:

Fix userRoles table references ‚Üí users.role field access
Fix rowCount vs array.length issues
Resolve User type compatibility (password property handling)
Update Drizzle ORM query result handling

Phase 3: Complete Production Server Integration
Merge essential routes into server/index-simple-prod.js:
typescript// Add these critical route groups:
- /api/workshop-data/* (all workshop endpoints)
- /api/admin/* (user management, dashboard)
- /api/reports/* (report generation)
- /api/growth-plan/* (quarterly planning)
- /api/auth/* (complete auth system)
Phase 4: Type Export Chain Fixes
Ensure all shared types are properly exported:

Fix missing StarCard, FlowAttributesRecord exports
Resolve Cohort type import/export chain
Fix UserRole enum consistency
Update all type definitions for container compatibility

Phase 5: Production Route Implementation
For each major route group, implement essential endpoints in production server:
Workshop Data Routes:

GET/POST /api/workshop-data/starcard
GET/POST /api/workshop-data/flow-attributes
GET/POST /api/workshop-data/assessments
GET/POST /api/workshop-data/navigation-progress

Admin Routes:

GET /api/admin/users (user management)
POST /api/admin/reset-user
GET /api/admin/dashboard
GET/api/admin/statistics

Report Routes:

GET /api/reports/individual/:userId
GET /api/reports/team/:teamId
POST /api/reports/generate

‚úÖ Success Criteria:

npx tsc --noEmit --skipLibCheck shows 0 errors
Production server includes all essential API routes
Container builds successfully with full application
All workshop functionality works on AWS
Admin panel fully functional
Zero dependencies on Replit

üéØ Implementation Priority:

Start with shared/ directory type fixes
Fix all import paths systematically across server/
Merge working routes into production server
Test each route group incrementally
Build and deploy complete production container

üö® Critical Requirements:

Maintain container compatibility (all .js extensions)
Preserve existing database schema structure
Keep session authentication working
Ensure all route handlers have proper error handling
Test database connectivity for all endpoints