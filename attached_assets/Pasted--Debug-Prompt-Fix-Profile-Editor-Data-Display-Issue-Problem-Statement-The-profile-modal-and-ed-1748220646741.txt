# Debug Prompt: Fix Profile Editor Data Display Issue

## Problem Statement
The profile modal and editor is showing "not provided" instead of displaying actual user information from the database. The system should fetch and display user profile data (name, email, organization, jobTitle) when the profile modal opens, but data is not being retrieved or displayed correctly.

## System Architecture Overview

### Frontend Components:
- **ProfileEditor.tsx**: `client/src/components/profile/ProfileEditor.tsx` (main modal-based editor)
- **ProfileForm.tsx**: `client/src/components/profile/ProfileForm.tsx` (alternative form component)
- **NavBar.tsx**: `client/src/components/layout/NavBar.tsx` (profile trigger button)

### Backend Components:
- **API Routes**: `server/routes/user-routes.ts`
- **Service Layer**: `server/services/user-management-service.ts` 
- **Target Endpoint**: `GET /api/user/profile`

### Database Schema:
- **users table**: id, username, name, email, organization, jobTitle, profilePicture, role, createdAt, updatedAt

## Systematic Debugging Approach

### STEP 1: Verify API Endpoint Functionality
**Test the GET endpoint directly:**
```bash
# Test in Replit console - replace with actual user ID from cookies
curl -X GET http://localhost:3000/api/user/profile \
  -H "Content-Type: application/json" \
  -H "Cookie: userId=[USER_ID]" \
  -v
```

**Expected Response:**
```json
{
  "success": true,
  "user": {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com", 
    "organization": "Acme Corp",
    "jobTitle": "Developer",
    "profilePicture": "data:image/jpeg;base64,..."
  }
}
```

**If this fails:** The issue is in your backend API or database query

### STEP 2: Debug Backend User Service
**Add detailed logging to UserManagementService:**
```javascript
// In server/services/user-management-service.ts
async getUserById(userId: number) {
  console.log(`Fetching user data for ID: ${userId}`);
  
  try {
    const query = `SELECT id, username, name, email, organization, jobTitle, profilePicture, role 
                   FROM users WHERE id = ?`;
    console.log('Executing query:', query, 'with userId:', userId);
    
    const result = await db.execute(query, [userId]);
    console.log('Database result:', result);
    
    if (!result || result.length === 0) {
      console.log('No user found in database');
      return null;
    }
    
    const user = result[0];
    console.log('User data retrieved:', user);
    return user;
  } catch (error) {
    console.error('Database error in getUserById:', error);
    throw error;
  }
}
```

### STEP 3: Debug API Route Handler
**Add logging to the profile GET endpoint:**
```javascript
// In server/routes/user-routes.ts
app.get('/api/user/profile', requireAuth, async (req, res) => {
  try {
    console.log('Profile GET request received');
    console.log('Cookies:', req.cookies);
    console.log('Session:', req.session);
    console.log('User ID from auth:', req.userId);
    
    const userId = req.userId || req.cookies.userId;
    console.log('Using userId:', userId);
    
    if (!userId) {
      console.log('No userId found - authentication failed');
      return res.status(401).json({ error: 'Not authenticated' });
    }
    
    const user = await UserManagementService.getUserById(parseInt(userId));
    console.log('User service returned:', user);
    
    if (!user) {
      console.log('User not found in database');
      return res.status(404).json({ error: 'User not found' });
    }
    
    // Remove sensitive data
    const { password, ...userProfile } = user;
    console.log('Sending user profile:', userProfile);
    
    res.json({ success: true, user: userProfile });
  } catch (error) {
    console.error('Profile GET error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});
```

### STEP 4: Verify Database Connection and Data
**Check if user data actually exists:**
```sql
-- Run these queries in your database console
SELECT * FROM users LIMIT 5;
SELECT id, name, email, organization, jobTitle FROM users WHERE id = [TEST_USER_ID];

-- Check for null/empty values
SELECT 
  COUNT(*) as total_users,
  COUNT(name) as users_with_name,
  COUNT(email) as users_with_email,
  COUNT(organization) as users_with_org,
  COUNT(jobTitle) as users_with_job_title
FROM users;
```

### STEP 5: Debug Frontend Data Fetching
**Add logging to ProfileEditor.tsx:**
```javascript
// In ProfileEditor.tsx
import { useQuery } from '@tanstack/react-query';

const ProfileEditor = ({ isOpen, onClose }) => {
  const { 
    data: profileData, 
    isLoading, 
    error,
    refetch 
  } = useQuery({
    queryKey: ['userProfile'],
    queryFn: async () => {
      console.log('Fetching user profile...');
      
      const response = await fetch('/api/user/profile', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      console.log('Profile fetch response status:', response.status);
      console.log('Profile fetch response headers:', response.headers);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Profile fetch failed:', response.status, errorText);
        throw new Error(`Failed to fetch profile: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Profile data received:', data);
      return data;
    },
    enabled: isOpen, // Only fetch when modal is open
  });

  console.log('ProfileEditor render - profileData:', profileData);
  console.log('ProfileEditor render - isLoading:', isLoading);
  console.log('ProfileEditor render - error:', error);

  // Check what's being displayed
  const userData = profileData?.user;
  console.log('User data for display:', userData);

  return (
    <div>
      {isLoading && <div>Loading...</div>}
      {error && <div>Error: {error.message}</div>}
      {userData && (
        <div>
          <div>Name: {userData.name || 'Not provided'}</div>
          <div>Email: {userData.email || 'Not provided'}</div>
          <div>Organization: {userData.organization || 'Not provided'}</div>
          <div>Job Title: {userData.jobTitle || 'Not provided'}</div>
        </div>
      )}
    </div>
  );
};
```

### STEP 6: Check Authentication and Session Management
**Verify user authentication is working:**
```javascript
// In your requireAuth middleware
const requireAuth = (req, res, next) => {
  console.log('requireAuth middleware triggered');
  console.log('Cookies:', req.cookies);
  console.log('Session:', req.session);
  
  const userId = req.session?.userId || req.cookies?.userId;
  console.log('Extracted userId:', userId);
  
  if (!userId) {
    console.log('Authentication failed - no userId');
    return res.status(401).json({ error: 'Authentication required' });
  }
  
  req.userId = userId;
  console.log('Authentication successful for userId:', userId);
  next();
};
```

### STEP 7: Debug Field Mapping Issues
**Check for title vs jobTitle inconsistency:**
```javascript
// In your database query, ensure you're selecting the right field
const query = `SELECT 
  id, 
  username, 
  name, 
  email, 
  organization, 
  jobTitle,  -- Make sure this matches your database column name
  profilePicture, 
  role 
FROM users 
WHERE id = ?`;

// If your database has 'title' instead of 'jobTitle', map it:
const userWithMappedFields = {
  ...user,
  jobTitle: user.title || user.jobTitle  // Handle both field names
};
```

## Common Failure Points to Check

1. **Authentication Issues**: User not logged in, invalid session/cookies
2. **Database Schema Mismatch**: Column names don't match (title vs jobTitle)
3. **Empty Database**: No user data exists for the authenticated user
4. **React Query Cache**: Stale data or cache not invalidating
5. **API Route Not Registered**: Profile routes not properly mounted
6. **CORS/Credentials**: Cookies not being sent with requests
7. **Field Null Values**: Database contains null values being displayed as "not provided"

## Verification Steps

### Quick Database Check:
```sql
-- Verify your specific user has data
SELECT id, name, email, organization, jobTitle, 
       CASE WHEN name IS NULL THEN 'NULL' ELSE 'HAS VALUE' END as name_status,
       CASE WHEN email IS NULL THEN 'NULL' ELSE 'HAS VALUE' END as email_status
FROM users 
WHERE id = [YOUR_USER_ID];
```

### Test Authentication:
```bash
# Check if you can access any authenticated endpoint
curl -X GET http://localhost:3000/api/user/profile \
  -H "Cookie: userId=1" \
  -v
```

### Frontend Console Check:
Open browser developer tools and look for:
- Network tab: Is the `/api/user/profile` request being made?
- Console tab: Are there any JavaScript errors?
- Application tab: Are cookies being set correctly?

## Expected Behavior After Fix

- ✅ GET `/api/user/profile` returns user data with 200 status
- ✅ ProfileEditor modal displays actual user information instead of "not provided"
- ✅ Console logs show successful data fetching and display
- ✅ React Query successfully caches the user profile data
- ✅ Edit mode works and saves changes back to database

## Diagnostic Priority Order

1. **Test API endpoint directly** (most likely issue)
2. **Check database for actual user data**
3. **Verify authentication is working**
4. **Debug frontend data fetching**
5. **Check field mapping consistency**

Focus on each layer systematically - API → Database → Authentication → Frontend → Cache - to isolate where the "not provided" values are coming from.