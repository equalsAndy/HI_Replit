# REPLIT AGENT: Workshop Locking System - Phase 2 Backend API Implementation

## ðŸŽ¯ OBJECTIVE
Implement backend API endpoints and middleware to support workshop completion tracking and input locking for the AllStarTeams application.

## ðŸ“Š CONTEXT
- Database schema already updated with completion fields in users table
- Need to add completion endpoints and protection middleware
- Two workshop types: AST (steps 1-1 to 6-1) and IA (steps ia-1-1 to ia-8-1)
- Must integrate with existing navigation progress system

## ðŸ”§ IMPLEMENTATION REQUIREMENTS

### 1. Add Completion Status Endpoint
**File:** `server/routes/workshop-data-routes.ts`

Add this GET endpoint:
```typescript
// GET /api/workshop-data/completion-status
router.get('/completion-status', authenticateUser, async (req, res) => {
  try {
    const userId = req.session.userId;
    
    const user = await db.select({
      astWorkshopCompleted: users.astWorkshopCompleted,
      iaWorkshopCompleted: users.iaWorkshopCompleted,
      astCompletedAt: users.astCompletedAt,
      iaCompletedAt: users.iaCompletedAt
    }).from(users).where(eq(users.id, userId)).limit(1);
    
    if (!user[0]) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    res.json(user[0]);
  } catch (error) {
    console.error('Error fetching completion status:', error);
    res.status(500).json({ error: 'Failed to fetch completion status' });
  }
});
```

### 2. Add Complete Workshop Endpoint
**File:** `server/routes/workshop-data-routes.ts`

Add this POST endpoint:
```typescript
// POST /api/workshop-data/complete-workshop
router.post('/complete-workshop', authenticateUser, async (req, res) => {
  try {
    const { appType } = req.body; // 'ast' or 'ia'
    const userId = req.session.userId;
    
    if (!appType || !['ast', 'ia'].includes(appType)) {
      return res.status(400).json({ error: 'Invalid app type. Must be "ast" or "ia"' });
    }
    
    // Get user's navigation progress to verify completion
    const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);
    if (!user[0]) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    // Parse navigation progress
    let progress;
    try {
      progress = JSON.parse(user[0].navigationProgress || '{}');
    } catch (e) {
      progress = {};
    }
    
    // Define required steps for each workshop type
    const requiredSteps = appType === 'ast' 
      ? ['1-1', '1-2', '2-1', '3-1', '4-1', '5-1', '6-1'] 
      : ['ia-1-1', 'ia-2-1', 'ia-3-1', 'ia-4-1', 'ia-5-1', 'ia-6-1', 'ia-7-1', 'ia-8-1'];
    
    const completedSteps = progress[appType]?.completedSteps || [];
    const allCompleted = requiredSteps.every(step => completedSteps.includes(step));
    
    if (!allCompleted) {
      const missingSteps = requiredSteps.filter(step => !completedSteps.includes(step));
      return res.status(400).json({ 
        error: 'Cannot complete workshop - not all steps finished',
        missingSteps 
      });
    }
    
    // Check if already completed
    const completionField = appType === 'ast' ? 'astWorkshopCompleted' : 'iaWorkshopCompleted';
    if (user[0][completionField]) {
      return res.status(400).json({ error: 'Workshop already completed' });
    }
    
    // Mark workshop as completed
    const timestampField = appType === 'ast' ? 'astCompletedAt' : 'iaCompletedAt';
    
    await db.update(users)
      .set({ 
        [completionField]: true,
        [timestampField]: new Date()
      })
      .where(eq(users.id, userId));
    
    res.json({ 
      success: true, 
      message: `${appType.toUpperCase()} workshop completed successfully`,
      completedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error completing workshop:', error);
    res.status(500).json({ error: 'Failed to complete workshop' });
  }
});
```

### 3. Add Workshop Lock Middleware
**File:** `server/routes/workshop-data-routes.ts`

Add this middleware function:
```typescript
// Middleware to check workshop completion status
const checkWorkshopLocked = async (req, res, next) => {
  try {
    const userId = req.session.userId;
    
    // Determine workshop type from request body or params
    const appType = req.body.appType || req.params.appType || 'ast';
    
    if (!['ast', 'ia'].includes(appType)) {
      return next(); // Skip check for invalid app types
    }
    
    const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);
    if (!user[0]) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    const completionField = appType === 'ast' ? 'astWorkshopCompleted' : 'iaWorkshopCompleted';
    const isLocked = user[0][completionField];
    
    if (isLocked) {
      return res.status(403).json({ 
        error: 'Workshop is completed and locked for editing',
        workshopType: appType.toUpperCase(),
        completedAt: user[0][appType === 'ast' ? 'astCompletedAt' : 'iaCompletedAt']
      });
    }
    
    next();
  } catch (error) {
    console.error('Error checking workshop lock status:', error);
    res.status(500).json({ error: 'Failed to check workshop lock status' });
  }
};
```

### 4. Apply Middleware to Data Modification Endpoints
**File:** `server/routes/workshop-data-routes.ts`

Apply the middleware to all POST endpoints that modify workshop data:

```typescript
// Apply middleware to protect data modification endpoints
router.post('/assessment/complete', authenticateUser, checkWorkshopLocked, ...existing_handler);
router.post('/flow-attributes', authenticateUser, checkWorkshopLocked, ...existing_handler);
router.post('/step-by-step-reflection', authenticateUser, checkWorkshopLocked, ...existing_handler);
router.post('/cantril-ladder', authenticateUser, checkWorkshopLocked, ...existing_handler);
router.post('/future-self', authenticateUser, checkWorkshopLocked, ...existing_handler);
router.post('/final-reflection', authenticateUser, checkWorkshopLocked, ...existing_handler);
// Add to any other POST endpoints that modify user data
```

### 5. Import Required Dependencies
**File:** `server/routes/workshop-data-routes.ts`

Ensure these imports are present at the top of the file:
```typescript
import { eq } from 'drizzle-orm';
import { users } from '@/shared/schema';
// ... other existing imports
```

## âœ… SUCCESS CRITERIA

After implementation:
1. GET `/api/workshop-data/completion-status` returns user completion status
2. POST `/api/workshop-data/complete-workshop` marks workshops as completed when all steps done
3. `checkWorkshopLocked` middleware prevents data modification when workshop is completed
4. All POST endpoints for user data are protected by the middleware
5. Proper error handling with clear messages
6. Workshop type validation (ast vs ia)
7. Step completion verification before allowing workshop completion

## ðŸš¨ IMPORTANT NOTES

- **Workshop Types**: 'ast' vs 'ia' - ensure correct step validation
- **Required Steps**: AST has 7 steps (1-1 to 6-1), IA has 8 steps (ia-1-1 to ia-8-1) 
- **Navigation Progress**: Read from existing navigationProgress JSON field
- **Database Fields**: Use astWorkshopCompleted, iaWorkshopCompleted, astCompletedAt, iaCompletedAt
- **Error Handling**: Provide clear error messages for debugging
- **Security**: Only allow users to complete their own workshops

## ðŸ”„ TESTING REQUIREMENTS

Verify these endpoints work correctly:
- GET completion status returns proper data
- POST complete workshop validates all steps completed
- POST complete workshop prevents duplicate completion
- Middleware blocks data modification when workshop is locked
- All error cases return appropriate status codes

This implementation provides the backend foundation for the workshop locking system.