// Development configuration for AI features
// This file provides safe defaults for AI development

export const aiDevConfig = {
  // Claude API configuration for development
  claude: {
    enabled: process.env.ENVIRONMENT === 'development' || process.env.ENVIRONMENT === 'production',
    apiKey: process.env.CLAUDE_API_KEY,
    model: 'claude-3-5-sonnet-20241022',
    maxTokens: 8000,
    temperature: 0.7,
    timeout: 30000
  },
  
  // Holistic reports configuration
  holisticReports: {
    enabled: false, // Start disabled for safety
    mockMode: true, // Use mock responses when API is unavailable
    rateLimitPerUser: 3, // Max reports per user per day in development
    cacheResults: true // Cache results to reduce API calls
  },
  
  // AI coaching configuration
  aiCoaching: {
    enabled: false, // Start disabled for safety
    mockMode: true,
    maxSessionLength: 10, // Max messages per session in development
    rateLimitPerUser: 5 // Max sessions per user per day
  },
  
  // Safety settings
  safety: {
    requireExplicitEnable: true, // Require explicit action to enable AI features
    logAllRequests: true, // Log all AI API requests in development
    validateResponses: true, // Validate AI responses before returning
    fallbackToMock: true // Fall back to mock responses on API errors
  }
};

// Mock responses for development
export const mockResponses = {
  holisticReport: {
    summary: "This is a mock holistic development report generated for testing purposes.",
    strengths: [
      "Strong analytical thinking",
      "Excellent communication skills", 
      "Creative problem solving"
    ],
    recommendations: [
      "Focus on developing leadership skills",
      "Consider taking on more challenging projects",
      "Seek mentorship opportunities"
    ],
    developmentPlan: "Continue building on existing strengths while addressing growth areas."
  },
  
  coachingResponse: {
    message: "This is a mock coaching response. In development mode, this would be generated by Claude API.",
    suggestions: [
      "Try breaking down complex tasks into smaller steps",
      "Schedule regular reflection time",
      "Seek feedback from colleagues"
    ]
  }
};

// Validation functions
export function validateAIConfiguration(): { valid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  // Check required environment variables for AI features
  if (aiDevConfig.claude.enabled && !aiDevConfig.claude.apiKey) {
    errors.push('CLAUDE_API_KEY is required when AI features are enabled');
  }
  
  // Validate model name
  if (aiDevConfig.claude.enabled && !aiDevConfig.claude.model) {
    errors.push('Claude model must be specified');
  }
  
  // Check rate limits are reasonable
  if (aiDevConfig.holisticReports.rateLimitPerUser > 10) {
    errors.push('Holistic reports rate limit too high for development');
  }
  
  if (aiDevConfig.aiCoaching.rateLimitPerUser > 20) {
    errors.push('AI coaching rate limit too high for development');
  }
  
  return { valid: errors.length === 0, errors };
}

// Helper to safely enable AI features for development
export function enableAIForDevelopment(feature: 'holisticReports' | 'aiCoaching' | 'all'): boolean {
  if (process.env.ENVIRONMENT !== 'development' && process.env.ENVIRONMENT !== 'production') {
    console.warn('AI features can only be enabled in development or production environment');
    return false;
  }
  
  const validation = validateAIConfiguration();
  if (!validation.valid) {
    console.error('AI configuration validation failed:', validation.errors);
    return false;
  }
  
  switch (feature) {
    case 'holisticReports':
      aiDevConfig.holisticReports.enabled = true;
      console.log('✅ Holistic reports enabled for development');
      break;
    case 'aiCoaching':
      aiDevConfig.aiCoaching.enabled = true;
      console.log('✅ AI coaching enabled for development');
      break;
    case 'all':
      aiDevConfig.holisticReports.enabled = true;
      aiDevConfig.aiCoaching.enabled = true;
      console.log('✅ All AI features enabled for development');
      break;
  }
  
  return true;
}

// Helper to check if AI features are properly configured
export function isAIConfigured(): boolean {
  return aiDevConfig.claude.enabled && 
         !!aiDevConfig.claude.apiKey && 
         validateAIConfiguration().valid;
}

// Get current AI configuration status
export function getAIConfigStatus() {
  return {
    environment: process.env.ENVIRONMENT || 'production',
    claude: {
      enabled: aiDevConfig.claude.enabled,
      hasApiKey: !!aiDevConfig.claude.apiKey,
      model: aiDevConfig.claude.model
    },
    features: {
      holisticReports: {
        enabled: aiDevConfig.holisticReports.enabled,
        mockMode: aiDevConfig.holisticReports.mockMode
      },
      aiCoaching: {
        enabled: aiDevConfig.aiCoaching.enabled,
        mockMode: aiDevConfig.aiCoaching.mockMode
      }
    },
    validation: validateAIConfiguration()
  };
}