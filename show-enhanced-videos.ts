import dotenv from 'dotenv';
import postgres from 'postgres';

// Load environment variables first
dotenv.config();

async function showEnhancedVideoManagement() {
  const databaseUrl = process.env.DATABASE_URL;
  
  if (!databaseUrl) {
    console.error('‚ùå DATABASE_URL environment variable is not set');
    process.exit(1);
  }

  const sql = postgres(databaseUrl);

  try {
    console.log('üé¨ ENHANCED VIDEO MANAGEMENT CONSOLE');
    console.log('====================================\n');

    // Get all videos with enhanced sorting
    const allVideos = await sql`
      SELECT 
        id, title, workshop_type, section, step_id,
        content_mode, required_watch_percentage, editable_id, autoplay
      FROM videos 
      ORDER BY workshop_type, sort_order, step_id
    `;

    console.log(`üìä Total Videos: ${allVideos.length}\n`);

    // Group and display by workshop type
    const allStarTeamsVideos = allVideos.filter((v: any) => v.workshop_type === 'allstarteams');
    const imaginalAgilityVideos = allVideos.filter((v: any) => v.workshop_type === 'imaginal-agility');
    const generalVideos = allVideos.filter((v: any) => v.workshop_type === 'general');

    console.log('üåü ALLSTARTEAMS (AST) - 7 VIDEOS:');
    allStarTeamsVideos.forEach((video: any, index: number) => {
      console.log(`   ${index + 1}. ${video.title}`);
      console.log(`      üìã Step: ${video.step_id || 'N/A'} | Section: ${video.section}`);
      console.log(`      üéØ Mode: ${video.content_mode} | Watch: ${video.required_watch_percentage}% | Auto: ${video.autoplay ? 'Yes' : 'No'}`);
      console.log(`      üé• ID: ${video.editable_id}\n`);
    });

    console.log('üß† IMAGINAL AGILITY (IA) - 13 VIDEOS:');
    imaginalAgilityVideos.forEach((video: any, index: number) => {
      console.log(`   ${index + 1}. ${video.title}`);
      console.log(`      üìã Step: ${video.step_id || 'N/A'} | Section: ${video.section}`);
      console.log(`      üéØ Mode: ${video.content_mode} | Watch: ${video.required_watch_percentage}% | Auto: ${video.autoplay ? 'Yes' : 'No'}`);
      console.log(`      üé• ID: ${video.editable_id}\n`);
    });

    console.log('üè† GENERAL (GEN) - 1 VIDEO:');
    generalVideos.forEach((video: any, index: number) => {
      console.log(`   ${index + 1}. ${video.title}`);
      console.log(`      üìã Step: ${video.step_id || 'N/A'} | Section: ${video.section}`);
      console.log(`      üéØ Mode: ${video.content_mode} | Watch: ${video.required_watch_percentage}% | Auto: ${video.autoplay ? 'Yes' : 'No'}`);
      console.log(`      üé• ID: ${video.editable_id}\n`);
    });

    // Show filtering capabilities
    console.log('üîç ENHANCED ADMIN INTERFACE FEATURES:');
    console.log('=====================================');
    console.log('   ‚úÖ Workshop Filter: All | AST | IA | General');
    console.log('   ‚úÖ Search: By title, description, or step ID');
    console.log('   ‚úÖ Sortable Columns: Click any header to sort');
    console.log('   ‚úÖ Watch Requirements Toggle: 1% ‚Üî 75%');
    console.log('   ‚úÖ Mode Badges: Student | Professional | Both');
    console.log('   ‚úÖ Results Counter: Shows filtered count');
    console.log('   ‚úÖ Clear Filters: Reset all filters button');

    // Show current state
    console.log('\n‚öôÔ∏è CURRENT CONFIGURATION:');
    console.log('=========================');
    console.log(`   üéØ Watch Requirements: ALL SET TO 1%`);
    console.log(`   üìä Content Modes: All set to "Both"`);
    console.log(`   üé¨ Workshop Distribution:`);
    console.log(`      ‚Ä¢ AllStarTeams: ${allStarTeamsVideos.length} videos`);
    console.log(`      ‚Ä¢ Imaginal Agility: ${imaginalAgilityVideos.length} videos`);
    console.log(`      ‚Ä¢ General: ${generalVideos.length} videos`);

    console.log('\nüöÄ READY FOR TESTING:');
    console.log('=====================');
    console.log('1. üñ•Ô∏è  Open your admin interface');
    console.log('2. üìπ Navigate to Video Management tab');
    console.log('3. üîÑ Test sorting by clicking column headers');
    console.log('4. üîç Try filtering by workshop type (IA, AST, All)');
    console.log('5. üîé Search for specific videos');
    console.log('6. ‚ö° Toggle watch requirements on/off');
    console.log('7. ‚úèÔ∏è  Edit video IDs with live preview');

    await sql.end();

  } catch (error) {
    console.error('‚ùå Error:', error);
    await sql.end();
    throw error;
  }
}

// Execute verification
showEnhancedVideoManagement()
  .then(() => {
    console.log('\n‚úÖ Enhanced video management ready for use!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Verification failed:', error);
    process.exit(1);
  });
